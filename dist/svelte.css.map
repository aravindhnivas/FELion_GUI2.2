{
  "version": 3,
  "file": "svelte.css",
  "sources": [
    "..\\src\\components\\Header.svelte",
    "..\\src\\components\\Navbar.svelte",
    "..\\src\\components\\Welcome.svelte",
    "..\\src\\components\\Powerfile.svelte",
    "..\\src\\components\\Misc.svelte",
    "..\\src\\components\\Settings.svelte",
    "..\\src\\components\\Container.svelte",
    "..\\src\\components\\utils\\AnimateBox.svelte",
    "..\\src\\components\\utils\\Filebrowser.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import * as electron from \"electron\";\r\n\r\n  const mainWindow = electron.remote.getCurrentWindow();\r\n  const maximize = () => {\r\n    mainWindow.isFullScreen()\r\n      ? mainWindow.setFullScreen(false)\r\n      : mainWindow.setFullScreen(true);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  #header {\r\n    -webkit-user-select: none;\r\n    -webkit-app-region: drag;\r\n  }\r\n\r\n  .navbar-item {\r\n    cursor: pointer;\r\n    -webkit-app-region: no-drag;\r\n    color: #fafafa;\r\n  }\r\n\r\n  #close:hover {\r\n    background: red;\r\n  }\r\n</style>\r\n\r\n<!-- Header -->\r\n<nav class=\"navbar is-fixed-top is-dark\" id=\"header\">\r\n\r\n  <div class=\"navbar-brand\">\r\n    <div class=\"navbar-item\">\r\n      <span class=\"icon\">\r\n        <i class=\"fas fa-chart-pie\" />\r\n      </span>\r\n      <span>FELion_GUI v.{localStorage[\"version\"]}</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"navbar-menu\">\r\n    <div class=\"navbar-end\">\r\n      <div class=\"navbar-item\" id=\"min\" on:click={() => mainWindow.minimize()}>\r\n        <i class=\"fas fa-window-minimize\" />\r\n      </div>\r\n      <div class=\"navbar-item\" id=\"max\" on:click={maximize}>\r\n        <i class=\"fas fa-window-restore\" />\r\n      </div>\r\n      <div class=\"navbar-item\" id=\"close\" on:click={() => mainWindow.close()}>\r\n        <i class=\"fas fa-times\"  />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</nav>\r\n",
    "<script>\r\n  export let navItems;\r\n  export let jq;\r\n  console.log(\"Loading\");\r\n  jq(document).ready(() => {\r\n    jq(\"#Navbar\").css(\"display\", \"block\");\r\n  });\r\n\r\n  const displayToggle = (element, value, classname) => {\r\n\r\n    let parent = (document.getElementById(element + \"-nav\").classList = classname)\r\n    try {\r\n\r\n      let targetElement = (document.getElementById(element).style.display = value)\r\n    } catch (err) {\r\n      console.log(element + \" Not yet created or Error loading the page.\");\r\n    }\r\n  }\r\n\r\n  const controlNav = event => {\r\n\r\n    let target = event.target.innerHTML;\r\n    console.log(target + \" is-active\");\r\n\r\n    navItems.forEach(item => {\r\n      if (item == target) {\r\n        displayToggle(item, \"block\", \"is-active\");\r\n      } else {\r\n        displayToggle(item, \"none\", \"\");\r\n      }\r\n    });\r\n  };\r\n  \r\n</script>\r\n\r\n<style>\r\n\r\n  i:focus {outline-color: transparent;}\r\n  #fullToggle {\r\n    margin-left: 0.7em;\r\n    margin-top: 0.7em;\r\n    cursor:pointer;\r\n  }\r\n\r\n  .section {padding: 0.3rem}\r\n\r\n  .tabs.is-medium {\r\n    font-weight: lighter;\r\n    font-size: 1.1rem;\r\n  }\r\n  .tabs {background: transparent}\r\n  .tabs.is-boxed a {border-radius: 20px;}\r\n\r\n  .tabs ul {\r\n    border-bottom-style: none;\r\n  }\r\n  .tabs.is-boxed li.is-active a {\r\n    border-color:transparent;\r\n    background-color: #6046a0fc;\r\n  }\r\n  .tabs.is-boxed a:hover {border: 1px solid white}\r\n  \r\n  #Navbar {\r\n\r\n    background-color: #4a3284;\r\n    margin-bottom: 0;\r\n    \r\n  }\r\n\r\n\r\n</style>\r\n\r\n<!-- Navigation Bar -->\r\n\r\n<section class=\"section box animated fadeInDown\" id=\"Navbar\" style=\"display:none\">\r\n  <div class=\"container is-fluid\">\r\n    <div class=\"tabs is-centered is-boxed is-medium\">\r\n      \r\n      <ul>\r\n        {#each navItems as item}\r\n          {#if item == 'Welcome'}\r\n            <li class=\"is-active\" id=\"{item}-nav\">\r\n              <a on:click={controlNav}>{item}</a>\r\n            </li>\r\n          {:else}\r\n            <li id=\"{item}-nav\">\r\n              <a on:click={controlNav}>{item}</a>\r\n            </li>\r\n          {/if}\r\n        {/each}\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</section>\r\n",
    "<script>\r\n  import AnimateBox from \"./utils/AnimateBox.svelte\";\r\n  export let jq;\r\n  console.log(\"Loading\");\r\n  jq(document).ready(() => jq(\"#Welcome\").css(\"display\", \"block\"));\r\n</script>\r\n\r\n<style>\r\n  #Welcome {\r\n    margin-top: 15% !important;\r\n    display: none;\r\n  }\r\n\r\n  .subtitle {\r\n    color: #fafafa;\r\n  }\r\n</style>\r\n\r\n<section class=\"section animated fadeInDown\" id=\"Welcome\">\r\n\r\n  <AnimateBox>\r\n    <h1 class=\"title\">FELion Spectrum Analyser</h1>\r\n    <h2 class=\"subtitle\">To analyse FELIX data for FELion Instrument.</h2>\r\n  </AnimateBox>\r\n\r\n</section>\r\n",
    "<script>\r\n\r\n    export let electron;\r\n    export let path;\r\n    export let jq;\r\n\r\n    import * as fs from 'fs';\r\n\r\n    const dialog = electron.remote.dialog;\r\n    let currentLocation;\r\n    if (localStorage.getItem(\"felix_location\") != undefined) {currentLocation = localStorage.getItem(\"felix_location\")}\r\n\r\n\r\n    let today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const yy = today.getFullYear().toString().substr(2);\r\n    today = `${dd}_${mm}_${yy}-#`;\r\n\r\n    $: filename = today+\".pow\";\r\n\r\n    let fileContent = `#POWER file\\n` +\r\n        `# 10 Hz FELIX\\n` +\r\n        `#SHOTS=26\\n` +\r\n        `#INTERP=linear\\n` +\r\n        `#    IN_no_UM (if one deletes the no the firs number will be in \\mu m\\n` +\r\n        `# wavelength/cm-1      energy/pulse/mJ\\n`\r\n\r\n    function browseFolder() {\r\n        const options = {\r\n            title: `Open a folder`,\r\n            properties: ['openDirectory'],\r\n            message: `Open a folder` //For macOS\r\n        };\r\n        dialog.showOpenDialog(null, options, (folder) => {\r\n            if (folder==undefined) return console.log(\"No files selected\");\r\n            currentLocation = folder[0];\r\n        });\r\n    };\r\n\r\n\r\n    const btnAnimate = (name, removeclass, addclass, timeout) =>{\r\n        jq(\"#powSaveBtn\").html(name).removeClass(removeclass).addClass(addclass);\r\n        setTimeout(()=>{jq(\"#powSaveBtn\").html(\"Save\").removeClass(addclass).addClass(removeclass);}, timeout)\r\n    };\r\n\r\n    function powSave() { \r\n        if(currentLocation==undefined) {return btnAnimate(\"Browse folder first !!!\", \"is-link\", \"is-danger animated shake faster\", 3000);}\r\n        fs.writeFile(path.join(currentLocation, filename), fileContent, (err) => {\r\n            btnAnimate(\"File saved\", \"is-link\", \"is-success animated bounce\", 2000);\r\n            if (err) throw err;\r\n        }) };\r\n\r\n</script>\r\n\r\n<style>\r\n.row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-bottom: 2em;\r\n}\r\n\r\n#powerfileLocationLabel, #powfilename {text-align: center}\r\nlabel {color: white}\r\n.container {height: 90vh;}\r\n.columns {height: 100%;}\r\n\r\n#powfileContent_mainContainer {height: 70%;}\r\n#powfileContent_Container {height: 90%;}\r\n#powfileContents {height: 100%;}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: #3f3e3e; \r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #2222229d;\r\n}\r\n\r\n</style>\r\n\r\n<section class=\"section\" style=\"display:none\" id=\"Powerfile\">\r\n\r\n    <div class=\"container\">\r\n        <div class=\"columns\">\r\n            <div class=\"column\">\r\n\r\n                <div class=\"field has-addons\">\r\n                    <div class=\"control is-expanded\">\r\n                        <input class=\"input locationLabel\" type=\"text\" \r\n                        placeholder=\"Location will be displayed\" id=\"powerfileLocationLabel\" \r\n                        bind:value={currentLocation}\r\n                        data-tippy=\"Current Location\">\r\n                    </div>\r\n                    <div class=\"control\">\r\n                        <div class=\"button is-dark\" on:click={browseFolder} data-tippy=\"Open a folder\">Browse</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\">\r\n                    <label class=\"label\">Filename</label>\r\n                    <div class=\"control\">\r\n                        <input class=\"input\" type=\"text\" placeholder=\"Filename\" id=\"powfilename\" bind:value={today} data-tippy=\"NOTE: Filename should match the felix file\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\" id=\"powfileContent_mainContainer\">\r\n                    <label class=\"label\">File Contents</label>\r\n                    <div class=\"control\" id=\"powfileContent_Container\">\r\n                        <textarea class=\"textarea\" placeholder=\"Textarea\" id=\"powfileContents\" bind:value={fileContent} data-tippy=\"For cm-1 to micron conversion: In 5th line change 'IN_no_UM' to 'IN_UM'\"\r\n                            on:keyup=\"{(e)=>{if(e.code==\"Space\"){fileContent = fileContent.substr(0, fileContent.length-1)+\"\\t\"}}}\"></textarea>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\">\r\n                    <div class=\"control\">\r\n                        <button class=\"button is-link\" id=\"powSaveBtn\" on:click={powSave}>Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</section>",
    "<script>\r\n  const pages = [\"Converter\"]\r\n\r\n  const navigator = [\r\n    {\r\n      name: \"Unit Converter\",\r\n      target: \"Converter\",\r\n      id: \"unit_converter_navbtn\"\r\n    }\r\n  ]\r\n  \r\n  const toggler = (event) => {\r\n    let target_id = event.target.getAttribute(\"target\")\r\n    let target = document.getElementById(target_id).style.display = \"block\"\r\n    pages.filter(page=> page != target_id).forEach(page=>document.getElementById(page).style.display=\"none\")\r\n  }\r\n\r\n  $: table_sz  = \"is-3 box conversion_table\"\r\n\r\n  // Fundamental constants\r\n\r\n  $: c = 299792458 // m/s\r\n  $: plank_constant = 6.62607004e-34 // Js\r\n  $: boltzman_constant = 1.380649e-23 // J/K\r\n  $: electron_charge = 1.602176565e-19 // C or eV = J\r\n\r\n  // eV/q = h.c/lam = h.f = KB.T = h.c.cm_1\r\n\r\n  $: hz = 1e12;\r\n  $: eV = (plank_constant/electron_charge) * hz;\r\n  $: kelvin = (plank_constant/boltzman_constant) * hz;\r\n  $: cm_1 = hz/(c*1e2);\r\n  $: um = (c/hz)*1e+6;\r\n  const energy_list = [\"hz\", \"um\", \"kelvin\", \"cm_1\", \"eV\"]\r\n\r\n  $: edit_constants = false\r\n\r\n  $: edit_numberDensity_constants = false\r\n\r\n  // Number density\r\n\r\n  $: pq1_before = 1e-8\r\n  $: pq1_after = 1e-5\r\n  $: ptrap_before = 1e-10\r\n  $: ptrap_after = 1e-5\r\n  $: temperature = 5\r\n  $: calibration_factor = 205.54\r\n\r\n  $: rt = 300\r\n\r\n  $: ndensity_temp = calibration_factor/(boltzman_constant*1e4*rt**0.5) * ((pq1_after - pq1_before) / temperature**0.5)\r\n  $: ndensity = ndensity_temp.toExponential(4)\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n  .page {height: 70vh;}\r\n  .conversion_table {\r\n    margin-right: 0.5em;\r\n    height: 70vh;\r\n  }\r\n  .energy {\r\n    margin-right: 0.5em;\r\n    margin-bottom: 0.5em;\r\n    width: 75%\r\n  }\r\n  .label {\r\n    color: #fafafa;\r\n    font-weight: 400;\r\n  }\r\n  input {margin-bottom: 0.5em;}\r\n\r\n</style>\r\n\r\n<section class=\"section animated fadeIn\" style=\"display:none\" id=\"Misc\">\r\n\r\n  <div class=\"columns is-centered is-multiline animated fadeIn\">\r\n\r\n    <!-- Navigator Row -->\r\n\r\n    <div class=\"column box is-11\">\r\n      <div class=\"level\">\r\n        <div class=\"level-left\">\r\n          {#each navigator as {name, target}}\r\n            <div class=\"level-item\">\r\n              <button class=\"button is-link misc_btn\" {target} on:click={toggler}>{name}</button>\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Unit Converter Page -->\r\n\r\n    <div class=\"column is-11 page animated fadeIn\" id=\"Converter\" style=\"display:block;\">\r\n\r\n      <div class=\"columns is-multiline\" id=\"unit_conversion_table\">\r\n\r\n        <div class=\"column {table_sz}\">\r\n          <h1 class=\"title\">Energy Conversion</h1>\r\n\r\n          <hr>\r\n          <input class=\"input energy\" type=\"number\" bind:value={hz} target=\"hz\">Hz\r\n          <input class=\"input energy\" type=\"number\" bind:value={um} target=\"um\" on:change=\"{()=>hz=(c/um)*1e6}\">&mu;m\r\n          <input class=\"input energy\" type=\"number\" bind:value={cm_1} target=\"cm_1\" on:change=\"{()=>hz=cm_1*c*1e2}\">cm-1\r\n          <input class=\"input energy\" type=\"number\" bind:value={kelvin} target=\"kelvin\" on:change=\"{()=>hz=(boltzman_constant/plank_constant)*kelvin}\">K\r\n          <input class=\"input energy\" type=\"number\" bind:value={eV} target=\"eV\" on:change=\"{()=>hz=(electron_charge/plank_constant)*eV}\">eV\r\n\r\n          <hr>\r\n\r\n          <h1 class=\"subtitle is-pulled-left\">Fundamental constants</h1>\r\n          <div class=\"pretty p-switch p-slim is-pulled-right\">\r\n              <input type=\"checkbox\" bind:checked={edit_constants}/>\r\n              <div class=\"state p-info p-on\">\r\n                  <label>Edit</label>\r\n              </div>\r\n          </div>\r\n          <input class=\"input fun.constants energy\" type=\"number\" disabled={!edit_constants} bind:value={c} data-tippy=\"Speed of light in vaccum\">m/s\r\n          <input class=\"input fun.constants energy\" type=\"number\" disabled={!edit_constants} bind:value={boltzman_constant} data-tippy=\"Boltzman constant\">J/K\r\n          <input class=\"input fun.constants energy\" type=\"number\" disabled={!edit_constants} bind:value={plank_constant} data-tippy=\"Plank's constant\">J.s\r\n          <input class=\"input fun.constants energy\" type=\"number\" disabled={!edit_constants} bind:value={electron_charge} data-tippy=\"Electric charge\">Columb\r\n\r\n        </div>\r\n\r\n        <div class=\"column {table_sz}\">\r\n          \r\n          <h1 class=\"title\">Number Density Calculation</h1>\r\n\r\n          <hr>\r\n\r\n          <div class=\"columns is-multiline\">\r\n\r\n            <div class=\"column is-half\">\r\n              <div class=\"field\">\r\n                <label class=\"label\">Main Chamber Press.</label>\r\n                <div class=\"control\">\r\n                  <input class=\"input ndensity\" bind:value={pq1_before} type=\"number\" step=\"0.000000001\" placeholder=\"Before\" data-tippy=\"Before letting in gas\">\r\n                  <input class=\"input ndensity\" bind:value={pq1_after} type=\"number\" step=\"0.000000001\" placeholder=\"After\" data-tippy=\"After letting in gas\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"column is-half\">\r\n              <div class=\"field\">\r\n                <label class=\"label\">Temperature</label>\r\n                <div class=\"control\">\r\n                  <input class=\"input ndensity\" bind:value={temperature} type=\"number\"  placeholder=\"Temeprature\">\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"column is-half\">\r\n              <div class=\"field\">\r\n                <label class=\"label\">Number density</label>\r\n                <div class=\"control\">\r\n                  <button class=\"button is-static\">{ndensity}</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          <hr>\r\n\r\n          <div class=\"control\">\r\n            <h1 class=\"subtitle is-pulled-left\">Constants</h1>\r\n            <div class=\"pretty p-switch p-slim is-pulled-right\">\r\n                <input type=\"checkbox\" bind:checked={edit_numberDensity_constants}/>\r\n                <div class=\"state p-info p-on\">\r\n                    <label>Edit</label>\r\n                </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"control\">\r\n\r\n            <div class=\"field\">\r\n              <label class=\"label\">Calibration Factor</label>\r\n              <div class=\"control\">\r\n                <input class=\"input number_constants\" bind:value={calibration_factor} type=\"number\" placeholder=\"Number density\" disabled={!edit_numberDensity_constants}>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"field\">\r\n              <label class=\"label\">Chamber Temperature (RT)</label>\r\n              <div class=\"control\">\r\n                <input class=\"input number_constants\" bind:value={rt} type=\"number\" step=\"0.1\" placeholder=\"Number density\" disabled={!edit_numberDensity_constants}>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n          \r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n</section>",
    "<script>\r\n\r\n    export let jq;\r\n    export let path;\r\n    export let mainWindow;\r\n    export let showinfo;\r\n    export let electron;\r\n\r\n    import { fade, fly } from 'svelte/transition';\r\n\r\n    // Importing modules\r\n    const {exec} = require(\"child_process\")\r\n    const https = require('https');\r\n    const fs = require('fs')\r\n    const admZip = require('adm-zip');\r\n    const copy = require('recursive-copy');\r\n\r\n    // When DOMContentent is loaded and ready\r\n    jq(document).ready(()=>{jq(\"#ConfigurationContainer\").addClass(\"is-active\")})\r\n\r\n    // Reading local package.json file\r\n    \r\n    let packageJSON = fs.readFileSync(path.join(__dirname, \"../package.json\"))\r\n    packageJSON = JSON.parse(packageJSON.toString(\"utf-8\"))\r\n    let currentVersion = packageJSON.version\r\n\r\n    // Pythonpath and pythonscript files location\r\n    \r\n    if (!localStorage[\"pythonpath\"]) localStorage[\"pythonpath\"] = path.resolve(__dirname, \"..\", \"python3.7\", \"python\")\r\n    if (!localStorage[\"pythonscript\"]) localStorage[\"pythonscript\"] = path.resolve(__dirname, \"python_files\")\r\n    let pythonpath = localStorage[\"pythonpath\"];\r\n    let pythonscript = localStorage[\"pythonscript\"];\r\n\r\n    // Getting python version\r\n    let pythonv;\r\n    exec(`${pythonpath} -V`, (err, stdout, stderr)=>{pythonv = stdout})\r\n\r\n    // Pages in Settings\r\n    let items = [\"Configuration\", \"Update\", \"About\"]\r\n\r\n    //////////////////////////////////////////////////// FUNCTIONS ////////////////////////////////////////////////////\r\n\r\n    $: saveChanges = false\r\n    const configSave = () => {\r\n\r\n        localStorage[\"pythonpath\"] = pythonpath\r\n        localStorage[\"pythonscript\"] = pythonscript\r\n        console.log(`Updated: \\nPythonpath: ${localStorage.pythonpath}\\nPython script: ${localStorage.pythonscript}`)\r\n        saveChanges = true\r\n    }\r\n\r\n    const toggle = (event) => {\r\n\r\n        let target = event.target.id\r\n        items.forEach(item=>{\r\n            let elementID = `${item}Container`\r\n            let $element = jq(`#${elementID}`)\r\n\r\n            let targetElement = document.getElementById(item)\r\n\r\n            if (elementID != target) {\r\n                if($element.hasClass(\"is-active\")) {\r\n                    $element.removeClass(\"is-active\")\r\n                    targetElement.style.display = \"none\"\r\n                }\r\n            } else {\r\n\r\n                $element.addClass(\"is-active\")\r\n                targetElement.style.display = \"block\"\r\n            }\r\n        })\r\n    }\r\n\r\n    $: new_version = \"\"\r\n    $: updatetoggle = \"none\"\r\n\r\n    $: checkupdateLoading = \"\"\r\n    $: updateLoading = \"\"\r\n    $: updateStatus = \"\"\r\n\r\n    // Github details\r\n\r\n    let github_username = \"aravindhnivas\"\r\n    let github_repo = \"FELion_GUI2.2\"\r\n\r\n    $: gihub_branchname = \"master\"\r\n    $: console.log(gihub_branchname)\r\n\r\n    $: urlPackageJson = `https://raw.githubusercontent.com/${github_username}/${github_repo}/${gihub_branchname}/package.json`\r\n    $: urlzip = `https://codeload.github.com/${github_username}/${github_repo}/zip/${gihub_branchname}`\r\n\r\n\r\n    // Local update-downloaded files\r\n    const updateFolder = path.resolve(__dirname, \"..\", \"update\")\r\n    const updatefilename = \"update.zip\"\r\n    const zipFile = path.resolve(updateFolder, updatefilename)\r\n\r\n    // Update checking\r\n    const updateCheck = () => {\r\n\r\n        updatetoggle = \"none\"\r\n        console.log(\"Checking for update\")\r\n\r\n        checkupdateLoading = \"is-loading\"\r\n        let developer_version = false;\r\n        console.log(`URL_Package: ${urlPackageJson}`)\r\n\r\n        console.log(`URL_ZIP: ${urlzip}`)\r\n        let request = https.get(urlPackageJson, (res) => {\r\n\r\n            console.log('statusCode:', res.statusCode);\r\n            console.log('headers:', res.headers);\r\n\r\n            res.on('data', (data) => {\r\n\r\n               data = data.toString(\"utf8\")\r\n                data = JSON.parse(data)\r\n                new_version = data.version\r\n                developer_version = data.developer\r\n\r\n                console.log(`Developer version: ${developer_version}`)\r\n                console.log(`Received package:`, data)\r\n                console.log(`Version available ${new_version}`)\r\n                console.log(`Current version ${localStorage.version}`)\r\n\r\n                updatetoggle = \"block\"\r\n                checkupdateLoading = \"animated bounce is-success\"\r\n                setTimeout(()=>checkupdateLoading = \"\", 2000)\r\n            })\r\n            \r\n            res.on(\"error\", (err)=>{\r\n                console.log(\"Error while reading downloaded data: \", err)\r\n                new_version = \"\"\r\n            });\r\n        })\r\n        \r\n        request.on('error', (err) => {\r\n            console.error(\"Error occured: (Try again or maybe check your internet connection)\\n\", err)\r\n            checkupdateLoading = \"animated shake faster is-danger\"\r\n            setTimeout(()=>checkupdateLoading = \"\", 2000)\r\n            updateStatus = \"Try again or Check your internet connection\"\r\n        });\r\n\r\n        request.on(\"close\", ()=>{\r\n            if (currentVersion === new_version) {\r\n                if (developer_version) {\r\n                    updateStatus = `CAUTION! You are checking with developer branch which has experimental features. Take backup before updating.`\r\n                } else {\r\n                    updateStatus = `No stable update available.`\r\n                }\r\n            }\r\n            else if (currentVersion < new_version) {\r\n\r\n                updateStatus = \"New update available\"\r\n\r\n                let options = {\r\n                    title: \"FELion_GUI2\",\r\n                    message: \"Update available \"+new_version,\r\n                    buttons: [\"Update and restart\", \"Later\"],\r\n                    type:\"info\"\r\n                }\r\n                \r\n                let response = showinfo(mainWindow, options)\r\n                console.log(response)\r\n                switch (response) {\r\n                    case 0:\r\n                        update()\r\n                    break;\r\n                    case 1:\r\n                        console.log(\"Not updating now\")\r\n                    break;\r\n                }\r\n            }\r\n            console.log(\"Update check completed\")\r\n        })\r\n    }\r\n\r\n    // Download the update file\r\n    const download = (downloadedFile) => {\r\n\r\n        return new Promise((resolve, reject)=>{\r\n\r\n            let response = https.get(urlzip, (res) => {\r\n                console.log(`URL: ${urlzip}`)\r\n                console.log('statusCode:', res.statusCode);\r\n                console.log('headers:', res.headers);\r\n\r\n                res.pipe(downloadedFile);\r\n                console.log(\"File downloaded\")\r\n                updateStatus = \"File downloaded\"\r\n\r\n                // Animating the button to indicate success message\r\n                updateLoading = \"animated bounce is-success\"\r\n                setTimeout(()=>updateLoading = \"\", 2000)\r\n                \r\n\r\n            })\r\n            \r\n            response.on('error', (err) => {\r\n\r\n                console.error(\"Error occured while downloading file: (Try again or maybe check your internet connection)\\n\", err)\r\n                updateLoading = \"animated shake faster is-danger\"\r\n                setTimeout(()=>updateLoading = \"\", 2000)\r\n                reject(err)\r\n            });\r\n\r\n            response.on(\"close\", ()=>{\r\n                \r\n                console.log(\"Downloading Completed\")\r\n\r\n                // Extracting downloaded files\r\n                console.log(\"Extracting files\")\r\n\r\n                setTimeout(()=>{\r\n                    let zip = new admZip(`${__dirname}/../update/update.zip`);\r\n                    zip.extractAllTo(/*target path*/`${__dirname}/../update`, /*overwrite*/true);\r\n\r\n                    console.log(\"File Extracted\")\r\n                    updateStatus = \"File Extracted\"\r\n\r\n                    // fadeInfadeOut()\r\n                    resolve(\"File extracted\")\r\n\r\n                }, 1600)\r\n            })\r\n        })\r\n    }\r\n\r\n    // Update processing\r\n    const update = () => {\r\n        // archive()\r\n        updateLoading = \"is-loading\"\r\n        \r\n        try {fs.readdirSync(updateFolder)} \r\n        catch (err) {\r\n            exec(`mkdir ${updateFolder}`, (err, stdout, stderr)=>{\r\n                if (err) {\r\n                    console.log(\"Update failed.\\nMaybe the user doesn't have necessary persmission to write files in the disk\")\r\n                    throw err;\r\n                }\r\n                console.log(stdout)\r\n                console.log(\"Update folder created\")\r\n            })\r\n        }\r\n        finally {\r\n\r\n            setTimeout(()=>{\r\n                const downloadedFile = fs.createWriteStream(zipFile);\r\n                download(downloadedFile)\r\n                    .then(result=>{\r\n                        console.log(result)\r\n                        console.log(\"Copying downloaded files\")\r\n                        let src = path.resolve(__dirname, \"..\", \"update\", `${github_repo}-${gihub_branchname}`)\r\n                        let dest = path.resolve(__dirname, \"..\")\r\n\r\n                        copy(src, dest, {overwrite: true}, function(error, results) {\r\n                            if (error) {\r\n                                console.error('Copy failed: ' + error);\r\n                                updateStatus = \"Update failed.\\nMaybe the user doesn't have necessary persmission to write files in the disk\"\r\n                            } else {\r\n                                console.info('Copied ' + results.length + ' files');\r\n                                updateStatus = \"Updated succesfull. Restart the program (Press Ctrl + R).\"\r\n                                let response = showinfo(mainWindow, {title:\"FELion_GUI2\", type:\"info\", message:\"Update succesfull\", buttons:[\"Restart\", \"Restart later\"]})\r\n                                if (response===0) mainWindow.reload()\r\n                            }\r\n                        })\r\n                        \r\n                    })\r\n                    .catch(err=>console.log(err), updateStatus = \"Update failed. Try again or Check your internet connection\")\r\n                \r\n            }, 1000)\r\n        }\r\n        \r\n    }\r\n\r\n    // Checking for internet connection\r\n    function checkInternet(cb) {\r\n\r\n        require('dns').lookup('google.com',function(err) {\r\n            if (err && err.code == \"ENOTFOUND\") {\r\n                cb(false);\r\n            } else {\r\n                cb(true);\r\n            }\r\n        })\r\n    }\r\n\r\n    // Checking for update on startup\r\n    checkInternet(function(isConnected) {\r\n        isConnected ? updateCheck() : console.log(\"Internet is not connected\")\r\n    })\r\n\r\n    // Checking for update on regular time interval\r\n    const hr_ms = (time) => time*60*60*10**3\r\n    let timeInterval_hr = 1\r\n\r\n    let check_update_continuously;\r\n    \r\n    // Clock timer\r\n    $: currentTime = \"\"\r\n    function ClockTimer() {\r\n        let date = new Date();\r\n        currentTime = date.toLocaleTimeString();\r\n    }\r\n    let clock = setInterval(ClockTimer, 1000);\r\n\r\n    // Auto update\r\n    $: auto_update_check = true\r\n    $: if (auto_update_check){ \r\n        console.log(\"Auto update On\")\r\n        let timeInterval = hr_ms(timeInterval_hr)\r\n\r\n        console.log(`Auto update check for every ${timeInterval_hr} hr. (${timeInterval} ms)`)\r\n        check_update_continuously = setInterval(()=>{\r\n            checkInternet(function(isConnected) {isConnected ? updateCheck() : console.log(\"Internet is not connected\")})\r\n            }, timeInterval\r\n        )\r\n     } else {\r\n        console.log(\"Auto update Off\")\r\n        clearInterval(check_update_continuously)\r\n    }\r\n\r\n    $: backupClass = \"is-link\"\r\n    $: backupName = \"FELion_GUI_backup\"\r\n\r\n    function openFolder() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            const options = {\r\n                title: \"Browse folder\",\r\n                properties: [\"openDirectory\"],\r\n                message: \"Browse folder\" //For macOS\r\n\r\n            }\r\n            electron.remote.dialog.showOpenDialog(null, options, location => {\r\n                location === undefined ? reject(\"No folder selected\") : resolve(location[0])\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    $: back_restore_display = false;\r\n    $: back_restore_log = \"\"\r\n\r\n    const backup_restore_logIt = (str) => {\r\n\r\n        back_restore_display = true\r\n        back_restore_log = str\r\n\r\n        setTimeout(()=>{back_restore_display = false}, 4000)\r\n    }\r\n\r\n\r\n    const archive = (event) => {\r\n\r\n        backupClass = \"is-loading is-link\"\r\n\r\n        console.log(`Archiving existing software to ${backupName}.zip`)\r\n\r\n        openFolder()\r\n        .then(location=>{\r\n\r\n            let folderName = location\r\n\r\n            console.log(\"Selected folder: \", folderName)\r\n\r\n            let _src = {path:path.resolve(__dirname, \"..\", \"src\"), name:\"src\"}\r\n            let _static = {path:path.resolve(__dirname, \"..\", \"static\"), name:\"static\"}\r\n            let _dist = {path:path.resolve(__dirname, \"..\", \"dist\"), name:\"dist\"}\r\n            let packageFile = {path:path.resolve(__dirname, \"..\", \"package.json\"), name:\"package.json\"}\r\n            let rollup = {path:path.resolve(__dirname, \"..\", \"rollup.config.js\"), name:\"rollup.config.js\"}\r\n            let tsconfig = {path:path.resolve(__dirname, \"..\", \"tsconfig.json\"), name:\"tsconfig.json\"}\r\n\r\n            let folders = [_src, _dist, _static, packageFile, rollup, tsconfig]\r\n\r\n            folders.forEach(folder=>{\r\n                const _dest = path.resolve(folderName, backupName , folder.name)\r\n                copy(folder.path, _dest, {overwrite: true}, function(error, results) {\r\n                    if (error) {\r\n                        console.log('Copy failed: ' + error);\r\n                        \r\n                    } else {\r\n                        console.info('Copied ' + results.length + ' files')\r\n                        console.info('Copied ' + results + ' files')\r\n                        console.log(\"BackUp completed\")\r\n                        backup_restore_logIt(\"BackUp completed\")\r\n                    }\r\n                })\r\n                \r\n            })\r\n\r\n            backupClass = \"is-success bounce\"\r\n            setTimeout(()=>backupClass = \"is-link\", 2000)\r\n            \r\n        })\r\n        .catch(err=>{\r\n            if (err != \"No folder selected\") {\r\n                backupClass = \"is-danger animated shake faster\"\r\n                setTimeout(()=>backupClass = \"is-link\", 2000)\r\n                backup_restore_logIt(\"BackUp Failed !!!\")\r\n            } else {backupClass = \"is-link\"}\r\n            \r\n            console.log(err)\r\n            \r\n        })\r\n    }\r\n\r\n    $: restoreClass = \"is-warning\"\r\n\r\n    const restore = () =>{\r\n        restoreClass = \"is-warning is-loading\"\r\n        console.log(`Restoring existing software to ${__dirname}`)\r\n        openFolder()\r\n        .then(location=>{\r\n\r\n            let folderName = location\r\n\r\n            console.log(\"Selected folder: \", folderName)\r\n\r\n            let _src = {path:path.resolve(folderName, \"src\"), name:\"src\"}\r\n            let _static = {path:path.resolve(folderName, \"static\"), name:\"static\"}\r\n            let _dist = {path:path.resolve(folderName, \"dist\"), name:\"dist\"}\r\n            let packageFile = {path:path.resolve(folderName, \"package.json\"), name:\"package.json\"}\r\n            let rollup = {path:path.resolve(folderName, \"rollup.config.js\"), name:\"rollup.config.js\"}\r\n            let tsconfig = {path:path.resolve(folderName, \"tsconfig.json\"), name:\"tsconfig.json\"}\r\n            let folders = [_src, _dist, _static, packageFile, rollup, tsconfig]\r\n\r\n            folders.forEach(folder=>{\r\n                const _dest = path.resolve(__dirname, \"..\", folder.name)\r\n                copy(folder.path, _dest, {overwrite: true}, function(error, results) {\r\n                    if (error) {\r\n                        console.log('Copy failed: ' + error);\r\n                    } else {\r\n                        console.info('Copied ' + results.length + ' files')\r\n                        console.info('Copied ' + results + ' files')\r\n                        console.log(\"Restoring completed\")\r\n                        backup_restore_logIt(\"Restoring completed\")\r\n                        let response = showinfo(mainWindow, {title:\"FELion_GUI2\", type:\"info\", message:\"Restored succesfull\", buttons:[\"Restart\", \"Restart later\"]})\r\n                        if (response===0) mainWindow.reload()\r\n                        else console.log(\"Restarting later\")\r\n                    }\r\n                })\r\n                \r\n            })\r\n\r\n            restoreClass = \"is-success bounce\"\r\n            setTimeout(()=>restoreClass = \"is-warning\", 2000)\r\n            \r\n        })\r\n        .catch(err=>{\r\n\r\n            if (err != \"No folder selected\") {\r\n                restoreClass = \"is-danger animated shake faster\"\r\n                setTimeout(()=>restoreClass = \"is-warning\", 2000)\r\n                backup_restore_logIt(\"Restoring Failed !!!\")\r\n            } else {restoreClass = \"is-warning\"}\r\n            console.log(err)\r\n        })\r\n    }\r\n    \r\n    $: developer_mode = false\r\n    $: developer_mode ? window.developerMode = true : window.developerMode = false\r\n\r\n</script>\r\n\r\n<style>\r\n\r\n    .is-active {\r\n        background-color: #46307d!important;\r\n        border-radius: 2em;\r\n    }\r\n    .menu-list a:hover {\r\n        \r\n        border-left: 2px solid;\r\n        background-color: rgba(0,0,0,0)!important;\r\n    }\r\n\r\n    .label {\r\n        font-size: 1.4rem;\r\n        font-weight: 400;\r\n    }\r\n    .row {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding-bottom: 2em;\r\n    }\r\n\r\n    .menu-label, label{\r\n        color: #fafafa;\r\n    }\r\n\r\n    .menu-label {font-size: 1.6em;}\r\n\r\n    .box2 {\r\n        background-color: #4e348e;\r\n        width: 70%;\r\n    }\r\n\r\n    .box {\r\n        overflow-y: auto;\r\n        max-height: 70vh;\r\n        min-width: 20%;\r\n        position: absolute;\r\n    }\r\n\r\n    .title {\r\n        font-weight: 400;\r\n    }\r\n\r\n</style>\r\n\r\n<section class=\"section animated fadeIn\" style=\"display:none\" id=\"Settings\">\r\n\r\n    <div class=\"columns\">\r\n\r\n        <div class=\"column is-3\">\r\n            <aside class=\"menu box\" style=\"height:100%\">\r\n                \r\n                <div class=\"menu-label\">Settings</div>\r\n                <ul class=\"menu-list\">\r\n                    {#each items as item}\r\n                        <li><a class=\"menulist\" on:click={toggle} id=\"{item}Container\">{item}</a></li>\r\n                    {/each}\r\n                </ul>\r\n\r\n            </aside>\r\n        </div>\r\n\r\n        <div class=\"column\">\r\n            <div class=\"row box box2\" style=\"height:100%\" >\r\n                <div class=\"container is-fluid\">\r\n                    \r\n                    <div class=\"is-pulled-right\">{currentTime}</div>\r\n                    <!-- Configuration Settings -->\r\n\r\n                    <div class=\"container\" id=\"Configuration\">\r\n\r\n                        <!-- Python path -->\r\n                        <div class=\"field\">\r\n                            <label class=\"label\">PythonPath </label>\r\n                            <div class=\"control\">\r\n                                <input class=\"input\" type=\"text\" placeholder=\"Enter the default python.exe file path\" bind:value={pythonpath}>\r\n                            </div>\r\n                            <p class=\"help\">location of python.exe file: to run python scripts</p>\r\n                        </div>\r\n\r\n                        <!-- Python script files -->\r\n                        <div class=\"field\">\r\n                            <label class=\"label\">Python Scripts </label>\r\n                            <div class=\"control\">\r\n                                <input class=\"input\" type=\"text\" placeholder=\"Enter the default python.exe file path\" bind:value={pythonscript}>\r\n                            </div>\r\n                            <p class=\"help\">location of python script files</p>\r\n                        </div>\r\n\r\n                        <!-- Save changes button -->\r\n                        <div class=\"control\" >\r\n                            <button class=\"button is-link is-pulled-right\" on:click={configSave}>Save</button>\r\n                            {#if saveChanges}\r\n                                <h1 class=\"subtitle\" transition:fade on:introend=\"{()=>setTimeout(() => saveChanges=false, 2000)}\">Changes saved!</h1>\r\n                            {/if}\r\n                        </div>\r\n                    \r\n                        <div class=\"control\">\r\n                            <div class=\"pretty p-switch p-slim\" style=\"margin-bottom:1em;\" >\r\n                                <input type=\"checkbox\" checked id=\"developerMode\" bind:checked={developer_mode}/>\r\n                                <div class=\"state p-info p-on\">\r\n                                    <label>Developer mode</label>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <!-- Update -->\r\n\r\n                    <div class=\"container\" style=\"display:none\" id=\"Update\">\r\n                        \r\n                        <h1 class=\"title\">FELion GUI (Current version): {currentVersion}</h1>\r\n                        <hr>\r\n                        <div class=\"level\">\r\n                            <div class=\"level-left\">\r\n                                <div class=\"level-item\"><input type=\"text\" class=\"input\" data-tippy=\"Github Username\" bind:value={github_username}></div>\r\n                                <div class=\"level-item\"><input type=\"text\" class=\"input\" data-tippy=\"Github repo\" bind:value={github_repo}></div>\r\n                                <div class=\"level-item\">\r\n                                    <div class=\"select\">\r\n                                        <select bind:value={gihub_branchname}>\r\n                                            <option>master</option>\r\n                                            <option>developer</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <hr>\r\n                        <div class=\"field is-grouped\">\r\n                            <p class=\"control\"><button class=\"button is-link {checkupdateLoading}\" on:click={updateCheck} >Check Update</button></p>\r\n                            <p class=\"control\"><button class=\"button is-warning {updateLoading}\" on:click={update}>Update</button></p>\r\n                        </div>\r\n                        <h1 class=\"subtitle\" style=\"display:block\">{updateStatus}</h1>\r\n                        \r\n                        <hr>\r\n\r\n                        <!-- Auto update options -->\r\n                        <div class=\"pretty p-switch p-slim\" style=\"margin-bottom:1em;\">\r\n                            <input type=\"checkbox\" bind:checked={auto_update_check} id=\"autoupdate\"/>\r\n                            <div class=\"state p-info p-on\">\r\n                                <label>Auto update</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"field has-addons\">\r\n                            <div class=\"control\"><div class=\"button is-static\">Time Interval (in hours)</div></div>\r\n                            <div class=\"control\">\r\n                                <input type=\"number\" class=\"input\"\r\n                                    placeholder=\"Enter update check for every (time in hrs) interval\"\r\n                                    value=1 on:change=\"{(e)=>timeInterval_hr = e.target.value}\"\r\n                                    data-tippy=\"Check for update every hour\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <hr>\r\n                        <div class=\"field is-grouped\">\r\n                            <p class=\"control\"><input type=\"text\" class=\"input\" bind:value={backupName} data-tippy=\"Backup folder name\"></p>\r\n                            <p class=\"control\"><button class=\"button animated {backupClass}\" on:click={archive} >Backup</button></p>\r\n                            <p class=\"control\"><button class=\"button animated {restoreClass}\" on:click={restore} >Restore</button></p>\r\n                            {#if back_restore_display}\r\n                                <p class=\"control\" transition:fade> {back_restore_log} </p>\r\n                            {/if}\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    \r\n\r\n                    <!-- About -->\r\n\r\n                    <div class=\"container\" style=\"display:none\" id=\"About\">\r\n                        <div class=\"control\">\r\n                            <h1 class=\"title\">Software details (version)</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Electron.js: {process.versions.electron}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Node.js: {process.versions.node}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Chrome: {process.versions.chrome}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">{pythonv}</h1>\r\n                            <hr>\r\n                            <h1 class=\"title\">Javascript Frameworks and libraries</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Svelte.js: {packageJSON.devDependencies.svelte.split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">jQuery: {packageJSON.dependencies[\"jquery\"].split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Typescript: {packageJSON.devDependencies.typescript.split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Tippy.js: {packageJSON.dependencies[\"tippy.js\"].split(\"^\")[1]}</h1>\r\n                            <hr>\r\n                            <h1 class=\"title\">CSS Frameworks and libraries</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Bulma: {packageJSON.devDependencies[\"bulma\"].split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">Fontawesome: {packageJSON.devDependencies[\"@fortawesome/fontawesome-free\"].split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">pretty-checkbox: {packageJSON.dependencies[\"pretty-checkbox\"].split(\"^\")[1]}</h1>\r\n                            <h1 class=\"subtitle\" style=\"margin-bottom:0\">hover.css: {packageJSON.dependencies[\"hover.css\"].split(\"^\")[1]}</h1>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n  \r\n</section>",
    "<script>\r\n\r\n  import Filebrowser from \"./utils/Filebrowser.svelte\";\r\n  import { runPlot } from \"./utils/js/felion_main.js\";\r\n  import * as dirTree from \"directory-tree\";\r\n  import { fade, fly } from 'svelte/transition';\r\n  // import { spawn, exec } from \"child_process\";\r\n\r\n  const glob = require(\"glob\")\r\n\r\n  export let id;\r\n  export let filetag;\r\n  export let filetype;\r\n  export let funcBtns;\r\n  export let plotID;\r\n  export let checkBtns;\r\n  export let jq;\r\n  export let electron;\r\n  export let path;\r\n  export let menu;\r\n  export let MenuItem;\r\n\r\n  jq(document).ready(() => {\r\n\r\n    jq(\"#theoryBtn\").addClass(\"fadeInUp\").css(\"display\", \"none\")\r\n    jq(\"#norm_tkplot\").addClass(\"fadeInUp\").css(\"display\", \"none\")\r\n\r\n    jq(\"#exp_fit\").addClass(\"fadeInUp\").css(\"display\", \"none\")\r\n    jq(\"#felix_shell_Container\").addClass(\"fadeInUp\").css(\"display\", \"block\")\r\n\r\n    let plotHeight;\r\n    let ScreenHeight = window.screen.height;\r\n\r\n    if (ScreenHeight >= 1000) plotHeight = 650\r\n    else plotHeight = 540\r\n\r\n    jq(\".plotContainer\").css(\"max-height\", plotHeight)\r\n\r\n  });\r\n  \r\n  const join = file => {\r\n    return [path.join(currentLocation, file)];\r\n  };\r\n\r\n  let delta = 1;\r\n\r\n  let normMethod = \"IntensityPerPhoton\";\r\n  let normalisation_method = [\"Log\", \"Relative\", \"IntensityPerPhoton\"]\r\n  \r\n  let log;\r\n  $: filetag == \"mass\" ? (log = true) : (log = false);\r\n\r\n  const linearlogCheck = event => {\r\n\r\n    let target = event.target;\r\n    let layout = {\r\n      yaxis: {\r\n        title: \"Counts\",\r\n        type: target.checked ? \"log\" : null\r\n      }\r\n    }\r\n\r\n    if (filetag == \"mass\") {\r\n      Plotly.relayout(\"mplot\", layout);\r\n    } else {\r\n      fileChecked.forEach(file => {\r\n        let tplot = file + \"_tplot\";\r\n        Plotly.relayout(tplot, layout);\r\n      });\r\n    }\r\n  };\r\n\r\n  let folderFile = { folders: [], files: [] };\r\n\r\n  let tree = dirTree.default;\r\n  const style = \"display:none;\";\r\n  let currentLocation;\r\n  $: console.log(`Locally stored location: [${filetag}]: ${localStorage.getItem(`${filetag}_location`)}`)\r\n  if (localStorage.getItem(`${filetag}_location`) != undefined) {currentLocation = localStorage.getItem(`${filetag}_location`)}\r\n\r\n  let allFiles = [];\r\n  $: fileChecked = allFiles.filter(file => file.checked).map(file => file.id).sort();\r\n  $: console.log(\"fileChecked\", fileChecked, \"\\n\");\r\n  $: fullfiles = fileChecked.map(file => path.join(currentLocation, file));\r\n\r\n\r\n  const getCheckedFiles = () => {\r\n    allFiles = Array.from(document.querySelectorAll(\".\" + filetag + \"-files\"));\r\n  };\r\n\r\n  const locationUpdateStatus = (status) => {\r\n    jq(document).ready(()=>{\r\n      \r\n      let locationUpdateDiv = document.getElementById(`${filetag}locationUpdate`)\r\n\r\n      locationUpdateDiv.innerHTML = status\r\n      locationUpdateDiv.style.display = \"block\"\r\n      \r\n      setTimeout(()=>{\r\n        locationUpdateDiv.innerHTML=\"\"\r\n        locationUpdateDiv.style.display = \"none\"\r\n      }, 2000)\r\n      \r\n    })\r\n  }\r\n\r\n  const updateFolder = location => {\r\n\r\n    console.log(\"Folder updating\");\r\n    locationUpdateStatus(\"Folder updating...\")\r\n\r\n    if (location === undefined || location === 'undefined') {\r\n      console.log(\"Location is undefined\");\r\n      jq(`#${filetag}refreshIcon`).removeClass(\"fa-spin\");\r\n      locationUpdateStatus(\"Location undefined!\")\r\n      return undefined;\r\n    } \r\n\r\n    currentLocation = location;\r\n    localStorage.setItem(`${filetag}_location`, currentLocation)\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n    console.log(`[${filetag}]: location is stored locally\\n${currentLocation}`)\r\n\r\n    try {\r\n\r\n      let folder = [];\r\n      let file = [];\r\n\r\n      const folderTree = tree(\r\n        currentLocation,\r\n        { extensions: new RegExp(filetag) },\r\n        (item, PATH, stats) => {\r\n          console.log(item);\r\n        }\r\n      );\r\n\r\n      let folderChild = folderTree.children;\r\n      for (let i in folderChild) {\r\n        folderChild[i].type == \"file\"\r\n          ? (file = [folderChild[i].name, ...file])\r\n          : (folder = [folderChild[i].name, ...folder]);\r\n      }\r\n      folderFile.parentFolder = folderTree.name;\r\n      folderFile.folders = folder;\r\n      folderFile.files = file;\r\n      console.log(\"Folder updated\");\r\n      locationUpdateStatus(\"Folder updated\")\r\n\r\n    } catch (err) {\r\n      console.log(`Error Occured: ${err}`)\r\n      locationUpdateStatus(\"Error Occured:\")\r\n    }\r\n\r\n    jq(`#${filetag}refreshIcon`).removeClass(\"fa-spin\");\r\n    return folderFile;\r\n\r\n  };\r\n  \r\n  let theoryfiles = [];\r\n\r\n  if (localStorage.getItem(\"theoryfiles\") != undefined) {theoryfiles = localStorage.getItem(\"theoryfiles\").split(\",\")}\r\n  $: theoryfilenames = theoryfiles.map(file=>path.basename(file))\r\n  function browseFile({theory=false}) {\r\n    if (theory == true) {\r\n      return new Promise((resolve, reject) => {\r\n        let files;\r\n\r\n        console.log(\"Optional file\");\r\n        const options = {\r\n          title: `Open theory files`,\r\n          filters: [{ name: \"All files\", extensions: [\"*\"] }],\r\n          properties: [\"openFile\", \"multiSelections\"],\r\n          message: `Open theory files` //For macOS\r\n        };\r\n\r\n        electron.remote.dialog.showOpenDialog(null, options, filePaths => {\r\n\r\n          if (filePaths == undefined) {reject(\"No files selected\")}\r\n          else {localStorage.setItem(\"theoryfiles\", filePaths)}\r\n          resolve(filePaths);\r\n        });\r\n      });\r\n    } \r\n    \r\n    else {\r\n      const options = {\r\n        title: `Open ${filetag} files`,\r\n        filters: [\r\n          { name: `${filetag} files`, extensions: filetype.split(\", \") },\r\n          { name: \"All files\", extensions: [\"*\"] }\r\n        ],\r\n        properties: [\"openFile\", \"multiSelections\"],\r\n        message: `Open ${filetag} files` //For macOS\r\n      };\r\n      electron.remote.dialog.showOpenDialog(null, options, filePaths => {\r\n        if (filePaths == undefined) return console.log(\"No files selected\");\r\n        currentLocation = path.dirname(filePaths[0]);\r\n        folderFile = updateFolder(currentLocation);\r\n        localStorage.setItem(`${filetag}_location`, currentLocation)\r\n        console.log(`[${filetag}]: location is stored locally\\n${currentLocation}`)\r\n      });\r\n    }\r\n  }\r\n  \r\n  $: delta_thz = 1\r\n  $: gamma_thz = 0\r\n\r\n  let fileInfo = {\r\n\r\n    // Create baseline matplotlib\r\n\r\n    felix:{\r\n      pyfile:\"baseline.py\",\r\n      args:[]\r\n    },\r\n\r\n    // Masspec matplotlib\r\n\r\n    mass:{\r\n      pyfile:\"mass.py\",\r\n      args:\"plot\"\r\n    },\r\n\r\n    // Timescan matplotlib\r\n\r\n    scan:{\r\n      pyfile:\"timescan.py\",\r\n      args:\"plot\"\r\n    },\r\n\r\n    // THz scan matplotlib\r\n\r\n    thz:{\r\n\r\n      pyfile:\"thz_scan.py\",\r\n      // args:[delta_thz, \"plot\", gamma_thz] // Doesn't take the binded delta_thz value\r\n      \r\n    }\r\n  }\r\n  $: modal = {mass:\"\", felix:\"\", scan:\"\", thz:\"\"}\r\n  $: error_msg = {mass:\"\", felix:\"\", scan:\"\", thz:\"\"}\r\n  function functionRun(event, target_id=null) {\r\n    let btname;\r\n\r\n    target_id === null ? btname = event.target.id : btname = target_id\r\n\r\n    console.log(`Button clicked (id): ${btname}`)\r\n    if (btname === \"createBaselineBtn\"){btname=\"felix_Matplotlib\"}\r\n    \r\n    switch (btname) {\r\n\r\n      ////////////// FELIX PLOT //////////////////////\r\n\r\n      case \"felixPlotBtn\":\r\n\r\n        jq(\"#theoryRow\").css(\"display\", \"none\")\r\n        // plotContainerHeight = \"60vh\"\r\n        Plotly.purge(\"exp-theory-plot\");\r\n\r\n        runPlot({\r\n          fullfiles: fullfiles, filetype: filetag, btname: btname,\r\n          pyfile: \"normline.py\", normethod: normMethod, args: [delta, fit_files]\r\n        })\r\n        .then((output)=>{\r\n          console.log(output)\r\n          expfitDiv = \"block\"\r\n        })\r\n        .catch((err)=>{\r\n          console.log('Error Occured', err); \r\n          error_msg[filetag]=err; \r\n          modal[filetag]=\"is-active\"\r\n        })\r\n      \r\n      break;\r\n\r\n\r\n      case \"exp_fit\":\r\n\r\n        let expfit_overwrite = document.getElementById(\"overwrite_expfit\").checked\r\n        let fitfile = document.getElementById(\"expfitFiles\").value\r\n\r\n        console.log(\"Expfit overwrite: \", expfit_overwrite)\r\n        console.log(`Avgplot Index: ${window.index}`)\r\n\r\n        if (window.index.length > 0) {\r\n          runPlot({\r\n          fullfiles: fullfiles, filetype: \"exp_fit\", btname: btname,\r\n          pyfile: \"exp_gauss_fit.py\", args: [expfit_overwrite, fitfile, normMethod, currentLocation, ...window.index]\r\n          })\r\n          .then((output)=>{\r\n            console.log(output)\r\n          })\r\n\r\n          .catch((err)=>{\r\n            console.log('Error Occured', err); \r\n            error_msg[filetag]=err; \r\n            modal[filetag]=\"is-active\"\r\n          })\r\n        } else {expfit_log_it(\"Please select a range from Averaged Spectrum\")}\r\n        \r\n      break;\r\n\r\n      // Norm_tkplot (Averaged plot experimental in Matplotlib)\r\n\r\n      case \"norm_tkplot\":\r\n        console.log(\"Running Norm_tkplot\")\r\n        let avgdata = document.getElementById(\"avgplot\").data\r\n        runPlot({\r\n                fullfiles: fullfiles,\r\n                filetype: \"general\",\r\n                filetag: \"felix\",\r\n                btname: \"norm_tkplot\",\r\n                pyfile: \"norm_tkplot.py\",\r\n                args: [normMethod]\r\n              })\r\n      break;\r\n      \r\n      ////////////// Matplotlib PLOT //////////////////////\r\n\r\n      case `${filetag}_Matplotlib`:\r\n\r\n        console.log(\"Opening Matplotlib in tkinter\")\r\n\r\n        let scriptname = fileInfo[filetag][\"pyfile\"]\r\n        let options = {args:[...fullfiles, fileInfo[filetag][\"args\"]]}\r\n\r\n        if (filetag === \"thz\") {fileInfo[filetag][\"args\"]=[delta_thz, \"plot\", gamma_thz]}\r\n\r\n        let obj = {\r\n            fullfiles: fullfiles,\r\n            filetag:filetag,            \r\n            filetype: \"general\",\r\n            btname: event.target.id,\r\n            pyfile: fileInfo[filetag][\"pyfile\"],\r\n            args: fileInfo[filetag][\"args\"]\r\n          }\r\n        runPlot(obj).then((output)=>console.log(output))\r\n        .catch((err)=>{\r\n          console.log('Error Occured', err); \r\n          error_msg[filetag]=err; \r\n          modal[filetag]=\"is-active\"\r\n        })\r\n\r\n      break;\r\n\r\n      ////////////// Masspec PLOT //////////////////////\r\n\r\n      case \"massPlotBtn\":\r\n          // show_nist = false\r\n\r\n          runPlot({\r\n            fullfiles: fullfiles,\r\n            filetype: filetag,\r\n            btname: btname,\r\n            pyfile: \"mass.py\",\r\n            args: \"run\"\r\n          })\r\n          .then((output)=>{\r\n            console.log(output)\r\n          })\r\n          .catch((err)=>{\r\n            console.log('Error Occured', err); \r\n            error_msg[filetag]=err; \r\n            modal[filetag]=\"is-active\"\r\n          })\r\n\r\n      break;\r\n\r\n      case \"mass_find_peaks\":\r\n        console.log(\"Finding mass peaks\")\r\n        jq(\"#mass_peak_find_row\").toggle()\r\n\r\n      break;\r\n\r\n      case \"nist_webbook\":\r\n        \r\n        jq(\"#nist_row\").toggle()\r\n        jq(\"#nistWebview_rows\").toggle()\r\n\r\n        checkInternet().then(result=>{\r\n          internet_connection = result\r\n          internet_active = \"is-success\"\r\n        }).catch(err=>{\r\n          internet_connection = result\r\n          internet_active = \"is-danger\"\r\n        })\r\n      break;\r\n\r\n      ////////////// Timescan PLOT //////////////////////\r\n\r\n      case \"timescanBtn\":\r\n          fileChecked.forEach(file => {\r\n              runPlot({\r\n                fullfiles: join(file),\r\n                filetype: filetag,\r\n                btname: btname,\r\n                pyfile: \"timescan.py\",\r\n                plotArea: file + \"_tplot\"\r\n              })\r\n              .then((output)=>{\r\n                console.log(output)\r\n              })\r\n              \r\n              .catch((err)=>{\r\n                console.log('Error Occured', err); \r\n                error_msg[filetag]=err; \r\n                modal[filetag]=\"is-active\"\r\n              })\r\n            });\r\n      break;\r\n\r\n      ////////////// THz PLOT //////////////////////\r\n\r\n      case \"thzBtn\":\r\n           runPlot({\r\n            fullfiles: fullfiles,\r\n            filetype: filetag,\r\n            btname: btname,\r\n            pyfile: \"thz_scan.py\",\r\n            args: [delta_thz, \"run\", gamma_thz]\r\n          })\r\n          .then((output)=>{\r\n            console.log(output)\r\n          })\r\n          .catch((err)=>{\r\n            console.log('Error Occured', err); \r\n            error_msg[filetag]=err; \r\n            modal[filetag]=\"is-active\"\r\n          })\r\n      break;\r\n\r\n      case \"theoryBtn\": \r\n        jq(\"#theoryRow\").toggle()\r\n\r\n      break;\r\n\r\n      case \"depletionscanBtn\":\r\n        jq(\"#depletionRow\").toggle()\r\n      break;\r\n\r\n      ////////////////////////////////////////////////////\r\n    \r\n      default:\r\n        break;\r\n\r\n      //////////////////////////////////////////////////// \r\n    }\r\n  };\r\n\r\n  function opentheory() {\r\n    browseFile({theory:true}).then(file =>  theoryfiles = file).catch(err => console.log(err));\r\n  }\r\n\r\n  function runtheory({tkplot=\"run\", filetype=\"theory\"}) {\r\n    runPlot({\r\n      fullfiles: theoryfiles, filetype: filetype, filetag:filetag,\r\n      btname: \"appendTheory\", pyfile: \"theory.py\", args: [normMethod, sigma, scale, currentLocation, tkplot]\r\n    }).then((output)=>{console.log(output)})\r\n    .catch((err)=>{\r\n        console.log('Error Occured', err);\r\n\r\n        error_msg[filetag]=err; \r\n        modal[filetag]=\"is-active\"\r\n      })\r\n  }\r\n\r\n  let sigma=20; //Sigma value for felixplot thoery gaussian profile\r\n  let scale=1;\r\n\r\n  let powerinfo = \"21, 21\";\r\n  let nshots = 10;\r\n  let massIndex = 0;\r\n  let timestartIndex = 1;\r\n\r\n  let depletionLabels = [\r\n    {\r\n      name: \"Power (ON, OFF)\",\r\n      id: \"powerinfo\"\r\n    },\r\n    {\r\n      name: \"FELIX Hz\",\r\n      id: \"nshots\"\r\n    },\r\n    {\r\n      name: \"Mass Index\",\r\n      id: \"massIndex\"\r\n    },\r\n    {\r\n      name: \"TimeStart Index\",\r\n      id: \"timeIndex\"\r\n    }\r\n  ]\r\n  const depletionPlot = async () => {\r\n    runPlot({\r\n      fullfiles: [currentLocation], filetype: \"general\", filetag:\"scan\",\r\n      btname: \"depletionSubmit\", pyfile: \"depletionscan.py\", \r\n      args: [jq(ResON).val(), jq(ResOFF).val(), ...powerinfo.split(\",\").map(pow=>parseFloat(pow)), nshots, massIndex, timestartIndex] \r\n    })\r\n    .then((output)=>{console.log(output)})\r\n    .catch((err)=>{\r\n      console.log('Error Occured', err); \r\n      error_msg[\"scan\"]=err; \r\n      modal[\"scan\"]=\"is-active\"\r\n    })\r\n\r\n  /* Streamlit depletion */\r\n  // let port = 8501\r\n    // let pyFile = path.resolve(__dirname, \"python_files\", \"depletion_streamlit.py\")\r\n    // let pyDir = path.dirname(localStorage[\"pythonpath\"])\r\n    // let streamlit_path = path.resolve(pyDir, \"Scripts\", \"streamlit\")\r\n\r\n    // glob(path.resolve(pyDir, \"Scripts\", \"streamlit*\"), (error, file)=>{\r\n    //   if(file.length===0){\r\n    //     console.log(\"Error: Streamlit is not installed.\\nInstalling now...\")\r\n    //     let packageName = \"streamlit-0.51.0-py2.py3-none-any.whl\"\r\n    //     let streamlit_package = path.resolve(__dirname, \"pipPackages\", packageName)\r\n    //     exec(`${path.resolve(pyDir, \"python\")} -m pip install ${streamlit_package}`, (err, result)=>{\r\n    //       if (err) {console.log(\"Error occured: Streamlit package couldn't be installed to python\")}\r\n    //       else {console.log(\"Streamlit package installed to python: \\n\", result)}\r\n    //     })\r\n    //   } else {console.log(\"Streamlit exists\")}\r\n    // })\r\n\r\n    // let defaultArguments = [\"run\", pyFile, \"--server.port\", port, \"--server.headless\", \"true\"]\r\n    // let sendArguments = [currentLocation, ...folderFile.files]\r\n\r\n    // let st = spawn(streamlit_path, [...defaultArguments, ...sendArguments])\r\n    // st.stdout.on('data', data => {console.log(data.toString(\"utf8\"))})\r\n    // st.stderr.on('data', err => {console.log(\"Error occured:\", err.toString(\"utf8\"))})\r\n    // st.on('close', ()=>{console.log(\"Completed\")})\r\n\r\n    // let localhostDepletion = `http://localhost:${port}`\r\n    // setTimeout(()=>window.open(localhostDepletion), 1000)\r\n  }\r\n\r\n  // Experimental fit (gaussian)\r\n\r\n  // Fit one peak\r\n  $: expfitDiv = \"none\"\r\n\r\n  // Finding peak\r\n  \r\n  $: prominence = 5\r\n  $: peak_width = 5\r\n  $: peak_height = 0\r\n\r\n  $: findPeak_btnCSS = \"is-link\"\r\n  $: clear_all_Peak_btnCSS = \"is-danger\"\r\n  $: clear_last_Peak_btnCSS = \"is-warning\"\r\n  $: fitallPeak_btnCSS = \"is-link\"\r\n\r\n  // Toggle find all peaks row\r\n  $: exp_fitall_div_status = false\r\n  $: exp_fitall_div = \"none\"\r\n  $: exp_fitall_div_status ? exp_fitall_div = \"block\" : exp_fitall_div = \"none\"\r\n\r\n  $: fit_files = \"averaged\"\r\n  $: fit_file_list_temp = fileChecked.map(file => file.split(\".\")[0])\r\n  $: fit_file_list = [\"averaged\", ...fit_file_list_temp]\r\n\r\n  $: fitall_tkplot_Peak_btnCSS = \"is-link\"\r\n\r\n  // expfit clear and clear all status\r\n  $: expfit_log_display = false\r\n  $: expfit_log = \"\"\r\n  const expfit_log_it = (str) => {\r\n    \r\n    expfit_log_display = true\r\n    expfit_log = str\r\n    \r\n    setTimeout(()=>{\r\n      expfit_log_display = false\r\n    }, 4000)\r\n  }\r\n\r\n  let ready_to_fit = false\r\n\r\n  function expfit_func({runfit = false, btname = \"find_expfit_peaks\", tkplot=false, filetype=\"expfit_all\"} = {}) {\r\n\r\n    let expfit_overwrite = document.getElementById(\"overwrite_expfit\").checked\r\n    let fitfile = document.getElementById(\"fitFiles\").value\r\n\r\n    runPlot({\r\n      fullfiles: [fitfile],\r\n      filetype: filetype,\r\n      filetag: filetag,\r\n      btname: btname,\r\n      pyfile: \"fit_all.py\",\r\n      args: [currentLocation, normMethod, prominence, runfit, peak_width, peak_height, expfit_overwrite, tkplot, ...fullfiles]\r\n    })\r\n    .then((output)=>console.log(output))\r\n    .catch((err)=>{\r\n      console.log('Error Occured', err); \r\n      error_msg[filetag]=err; \r\n      modal[filetag]=\"is-active\"\r\n    })\r\n  }\r\n\r\n  const findPeak = () => {\r\n\r\n    console.log(\"Finding preak with prominence value: \", prominence)\r\n    ready_to_fit = true\r\n    expfit_func()\r\n  }\r\n\r\n  const delete_file_line = ({btname = \"exp_fit\"} = {}) => {\r\n    let fitfile = document.getElementById(\"expfitFiles\").value\r\n    runPlot({\r\n      fullfiles: [fitfile],\r\n      filetype: \"general\",\r\n      filetag: filetag,\r\n      btname: btname,\r\n      pyfile: \"delete_fileLines.py\",\r\n      args: [currentLocation]\r\n    })\r\n    .then((output)=>console.log(output))\r\n    .catch((err)=>{\r\n      console.log('Error Occured', err); \r\n      error_msg[filetag]=err; \r\n      modal[filetag]=\"is-active\"\r\n    })\r\n  }\r\n  const clearAllPeak = () => {\r\n    console.log(\"Removing all found peak values\")\r\n    let lines_length = window.line.length\r\n    let annotations_length = window.annotations.length\r\n    if (lines_length === 0 & annotations_length === 0) {expfit_log_it(\"No fitted lines found\")}\r\n\r\n    window.annotations = []\r\n    window.index = []\r\n    Plotly.relayout(\"avgplot\", { annotations: [], shapes: [] })\r\n\r\n    let plottedFiles_length = window.line.length / 2\r\n    console.log(`Total files plotted: ${plottedFiles_length}`)\r\n    for (let i=0; i<plottedFiles_length; i++) {Plotly.deleteTraces(\"avgplot\", [-1])}\r\n    window.line = []\r\n\r\n    ready_to_fit = false\r\n  }\r\n\r\n  const clearLastPeak = () => {\r\n    \r\n    if (window.line.length > 0) {\r\n      delete_file_line()\r\n      Plotly.deleteTraces(\"avgplot\", [-1])\r\n\r\n      console.log(\"Last fitted peak removed\")\r\n    } else {\r\n      \r\n      if (window.annotations.length === 0) {expfit_log_it(\"No fitted lines found\")}\r\n      console.log(\"No line fit is found to remove\")\r\n    }\r\n    \r\n    window.line = window.line.slice(0, window.line.length - 2)\r\n    window.annotations = window.annotations.slice(0, window.annotations.length - 1)\r\n    window.index = []\r\n    Plotly.relayout(\"avgplot\", { annotations: window.annotations, shapes: window.line })\r\n    if (window.line.length === 0) {ready_to_fit = false}\r\n  }\r\n\r\n\r\n  const fitall = (tkplot=false, btname=\"fitall_expfit_peaks\", filetype=\"expfit_all\") => {\r\n\r\n    console.log(\"Fitting all found peaks\")\r\n    if (ready_to_fit) {expfit_func({runfit:true, btname:btname, tkplot:tkplot, filetype:filetype})}\r\n\r\n    else {\r\n      findPeak_btnCSS = \"is-link shake\"\r\n      setTimeout(()=>findPeak_btnCSS = \"is-link\", 1000)\r\n    }\r\n  }\r\n\r\n  $: mass_peak_width = 2\r\n  $: mass_prominence = 3\r\n  $: mass_peak_height = 40\r\n  \r\n  const find_masspec_peaks = () => {\r\n\r\n    console.log(\"Finding masspec peaks\")\r\n\r\n    let sendMassFile = path.join(currentLocation, massFiles.value)\r\n\r\n    runPlot({\r\n      fullfiles: [sendMassFile],\r\n      filetype: \"find_peaks\",\r\n      filetag: filetag,\r\n      btname: \"mass_get_peaks\",\r\n      pyfile: \"find_peaks_masspec.py\",\r\n      args: [mass_prominence, mass_peak_width, mass_peak_height]\r\n    })\r\n    .then((output)=>console.log(output))\r\n    .catch((err)=>{\r\n      console.log('Error Occured', err); \r\n      error_msg[filetag]=err; \r\n      modal[filetag]=\"is-active\"\r\n    })\r\n  }\r\n\r\n  const clear_mass_peaks = () => {Plotly.relayout(\"mplot\", { annotations: [] })}\r\n\r\n  $: nist_mformula = localStorage[\"nist_mformula\"] || \"\"\r\n  $: nist_mname = localStorage[\"nist_mname\"] || \"\"\r\n  $: nist_molecule_name = `Name=${nist_mname}`\r\n  $: nist_molecule_formula = `Formula=${nist_mformula}`\r\n  $: nist_url = localStorage[\"nist_url\"] || \"https://webbook.nist.gov/cgi/cbook.cgi?Name=&Units=SI&Mask=200#Mass-Spec\"\r\n\r\n\r\n  const set_nist_url = (format) => {\r\n\r\n    let fmt;\r\n    format == \"by_name\" ? fmt = nist_molecule_name : fmt = nist_molecule_formula\r\n    nist_url = `https://webbook.nist.gov/cgi/cbook.cgi?${fmt}&Units=SI&Mask=200#Mass-Spec`\r\n\r\n    localStorage[\"nist_url\"] = nist_url\r\n    localStorage[\"nist_mformula\"] =  nist_mformula\r\n    localStorage[\"nist_mname\"] = nist_mname\r\n  }\r\n\r\n  function checkInternet() {\r\n\r\n    return new Promise((resolve, reject)=>{\r\n      require('dns').lookup('google.com',function(err) {\r\n          if (err && err.code == \"ENOTFOUND\") {\r\n              reject(\"No Internet access available\")\r\n          } else {\r\n              resolve(\"Internet Connected\")\r\n          }\r\n      })\r\n    })\r\n  }\r\n\r\n  $: internet_connection = \"No Internet access available\"\r\n  $: internet_active = \"is-danger\"\r\n  $: search_string = \"\"\r\n  $: google_search = `http://www.google.com/search?q=${search_string}.`\r\n\r\n\r\n  function animatePlot(){\r\n    try {\r\n      let data = window.avg_data[normMethod][\"data\"]\r\n      let layout = window.avg_data[normMethod][\"layout\"]\r\n      Plotly.react(\"avgplot\", data , layout )\r\n    } catch (err) {console.log(\"First start plotting\")}\r\n  }\r\n</script>\r\n\r\n<style>\r\n\r\n  input[type=\"number\"] {width: 5vw;}\r\n\r\n  label {color:white;}\r\n\r\n  #theorylabel{\r\n    color:white;\r\n    border:solid 3px #bdc3c7; \r\n    padding:0.4em;\r\n  }\r\n\r\n  .locationLabel {\r\n    text-align: center;\r\n  }\r\n\r\n  .row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-bottom: 0.6em;\r\n  }\r\n\r\n  .funcBtn {\r\n    margin: 0 0.5em;\r\n  }\r\n  .section {\r\n    position: fixed;\r\n    width: 100%;\r\n    padding: 0.3rem;\r\n  }\r\n  .plotContainer {\r\n    overflow-y: auto;\r\n    width: 97%;\r\n  }\r\n\r\n  /* Buttons:  border, background and hovering colors */\r\n  .button.is-link, .button.is-warning, .button.is-danger {background-color: rgba(0,0,0,0);}\r\n\r\n  .button.is-link {border-color: #dbdbdb;}\r\n  .button.is-link:hover, .button.is-link.is-hovered {background-color: #7a64b1;}\r\n\r\n  .button.is-warning {border-color: #ffc402; color: white;}\r\n  .button.is-warning:hover, .button.is-warning.is-hovered {background-color: #7a64b1; color: white;}\r\n\r\n  .button.is-danger {border-color: #ff3860;}\r\n  .button.is-danger:hover, .button.is-danger.is-hovered {background-color: #ff3860;}\r\n\r\n  .button.is-static {background: transparent; color: white;}\r\n\r\n  /*  */\r\n\r\n  /* Input hover, focused colors */\r\n  .input {\r\n    background: transparent;\r\n    color: white;\r\n  }\r\n\r\n  .locationLabel {border-radius: 20px;}\r\n\r\n  .input:hover {border-color: #fafafa;}\r\n  .input:focus {\r\n    border-color: #fafafa;\r\n    box-shadow: 0 0 0 0.05em #fafafa;\r\n  }\r\n  .column {max-height: 90vh}\r\n  .delete:hover {background-color:#ff3860}\r\n\r\n  .filebrowserColumn {width: 14%!important}\r\n\r\n  @media only screen\r\n  and (max-width: 1400px) {\r\n    .filebrowserColumn {width: 20%!important}\r\n  }\r\n\r\n  #nist_webview {height:42em;}\r\n  .webviewIcon {cursor: pointer;}\r\n  .level-item {margin-left: 0!important}\r\n\r\n  .locationRow {margin-right: 2em;}\r\n  .row1 {\r\n    margin: 0;\r\n    background-color: #594194;\r\n  }\r\n  .subtitle {color: #fafafa;}\r\n\r\n</style>\r\n\r\n<section class=\"section\" {id} {style}>\r\n\r\n  <div class=\"columns\">\r\n\r\n    <div class=\"column is-2 filebrowserColumn\" id=\"{filetag}filebrowserColumn\">\r\n      <Filebrowser\r\n        {filetag} {currentLocation} {updateFolder}\r\n        {getCheckedFiles} {jq} {path} />\r\n    </div>\r\n\r\n    <div class=\"column\">\r\n\r\n      <div class=\"modal {modal[filetag]} is-clipped\">\r\n        <div class=\"modal-background\"></div>\r\n        <div class=\"modal-card\">\r\n          <header class=\"modal-card-head\">\r\n            <p class=\"modal-card-title\">Error Occured while processing the data</p>\r\n            <button class=\"delete\" aria-label=\"close\" on:click=\"{()=>modal[filetag]=''}\"></button>\r\n          </header>\r\n          <section class=\"modal-card-body\" style=\"color:black\"> {error_msg[filetag]} </section>\r\n\r\n          <footer class=\"modal-card-foot\">\r\n            <button class=\"button\" on:click=\"{()=>modal[filetag]=''}\">Close</button>\r\n          </footer>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row row1 box\">\r\n        <div class=\"row locationRow\">\r\n\r\n          <div class=\"field has-addons\">\r\n            <div class=\"control is-expanded\">\r\n              <input\r\n                class=\"input locationLabel\"\r\n                type=\"text\"\r\n                placeholder=\"Location will be displayed\"\r\n                id=\"{filetag}LocationLabel\"\r\n                value={currentLocation} \r\n                on:keyup=\"{\r\n                  (e)=>{\r\n                    if (e.key == \"Enter\") {\r\n                      let location = e.target.value\r\n                      console.log(`Setting location: ${location}`)\r\n                      currentLocation = location\r\n                    }\r\n                  }\r\n                }\" \r\n                data-tippy=\"Current Location\"/>\r\n            </div>\r\n            <div class=\"control\">\r\n              <div class=\"button is-link\" on:click={browseFile}>Browse</div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <div class=\"row buttonsRow\">\r\n\r\n          <div class=\"level\">\r\n\r\n            <div class=\"level-left animated fadeIn\">\r\n\r\n              {#each funcBtns as { id, name }}\r\n                <div \r\n                  class=\"level-item button hvr-glow funcBtn is-link animated\"\r\n                  {id} on:click={functionRun}>\r\n                  {name}\r\n                </div>\r\n\r\n              {/each}\r\n\r\n              {#each checkBtns as {id, name, bind, help}}\r\n                <div class=\"level-item animated\" id=\"{id}_Container\" >\r\n\r\n                  <div class=\"pretty p-default p-curve p-toggle\" data-tippy={help}>\r\n\r\n                    {#if name[0]===\"Log\"}\r\n                      <input type=\"checkbox\" {id} checked={bind} on:click={linearlogCheck} />\r\n                    {:else}\r\n                      <input type=\"checkbox\" {id} checked={bind} on:click=\"{(e)=>{console.log(`Status (${e.target.id}):\\n ${e.target.checked}`)}}\"/>\r\n                    {/if}\r\n\r\n                    <div class=\"state p-success p-on\"> <label>{name[0]}</label> </div>\r\n                    <div class=\"state p-danger p-off\"> <label>{name[1]}</label> </div>\r\n\r\n                  </div>\r\n                  \r\n                </div>\r\n              {/each}\r\n\r\n              {#if filetag == 'felix'}\r\n                <div class=\"level-item\">\r\n                  <span class=\"select\">\r\n                    <select\r\n                      id=\"felixmethod\"\r\n                      bind:value={normMethod}\r\n                      data-tippy=\"Normalisation method\"\r\n                      on:change={animatePlot}>\r\n                      {#each normalisation_method as method}\r\n                        <option>{method}</option>\r\n                      {/each}\r\n                    </select>\r\n                  </span>\r\n                </div>\r\n                <div class=\"level-item\">\r\n                  <div class=\"field has-addons\">\r\n                    <div class=\"control\"><div class=\"button is-static\">&Delta (cm-1)</div></div>\r\n\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        type=\"number\" step=\"0.5\"\r\n                        id=\"delta_value\"\r\n                        placeholder=\"Delta value\"\r\n                        data-tippy=\"Delta value for averaging FELIX spectrum\"\r\n                        bind:value={delta}\r\n                        on:change=\"{(e)=>functionRun(e, \"felixPlotBtn\")}\" />\r\n                    </div>\r\n                    \r\n                  </div>\r\n                </div>\r\n                   \r\n              {/if}\r\n\r\n              {#if filetag == 'thz'}\r\n\r\n                <!-- Delta value -->\r\n                <div class=\"level-item\" >\r\n\r\n                  <div class=\"field has-addons\">\r\n                    <div class=\"control\"><div class=\"button is-static\">&delta; (in Hz)</div></div>\r\n\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        type=\"number\" step=\"0.5\"\r\n                        id=\"delta_value_thz\"\r\n                        placeholder=\"Delta value\"\r\n                        data-tippy=\"Delta value for spectrum (in KHz)\"\r\n                        bind:value={delta_thz}\r\n                        on:change=\"{(e)=>functionRun(e, \"thzBtn\")}\" />\r\n                    </div>\r\n                    \r\n                  </div>\r\n\r\n                </div>\r\n\r\n                <!-- Gamma -->\r\n\r\n                <div class=\"level-item\">\r\n\r\n                  <div class=\"field has-addons\">\r\n                    <div class=\"control\"><div class=\"button is-static\">&gamma;</div></div>\r\n\r\n                    <div class=\"control\">\r\n                      <input\r\n                        class=\"input\"\r\n                        type=\"number\" step=\"0.01\"\r\n                        id=\"gamma_thz\"\r\n                        placeholder=\"Gamma value for lorentz part\"\r\n                        data-tippy=\"Lorentz gamma for fitting (Voigt Profile)\"\r\n                        bind:value={gamma_thz}\r\n                        on:change=\"{(e)=>functionRun(e, \"thzBtn\")}\"/>\r\n                    </div>\r\n                    \r\n                  </div>\r\n\r\n                </div>\r\n\r\n              {/if}\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        {#if filetag==\"felix\"}\r\n          <div class=\"row\" id=\"theoryRow\" style=\"display:none; padding-bottom:1em\">\r\n              <div class=\"level \" id=\"theoryContainer\">\r\n                  <div class=\"level-left\">\r\n\r\n                    <div class=\"level-item\">\r\n                      <div class=\"control\">\r\n                        <div class=\"select\">\r\n                          <select>\r\n                              {#each theoryfilenames as theoryfile}\r\n                                  <option value={theoryfile}>{theoryfile}</option>\r\n                              {/each}\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"level-item\">\r\n                      <div class=\"control\">\r\n                          <button class=\"button is-link\" on:click={opentheory}>Choose file</button>\r\n                          <input class=\"input\" type=\"number\" on:change=\"{()=>runtheory({tkplot:\"run\"})}\" bind:value={sigma} style=\"width:150px\" data-tippy=\"Sigma (deviation) from central frequency\">\r\n                          <input class=\"input\" type=\"number\" on:change=\"{()=>runtheory({tkplot:\"run\"})}\" step=\"0.001\" bind:value={scale} style=\"width:150px\" data-tippy=\"Scaling factor (to shift in position)\">\r\n                          <button class=\"funcBtn button is-link animated\" on:click={runtheory} id=\"appendTheory\">Submit</button>\r\n                          <button class=\"funcBtn button is-link animated\" on:click=\"{()=>runtheory({tkplot:\"plot\", filetype:\"general\"})}\" id=\"theory_Matplotlib\">Open in Matplotlib</button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n        {/if}\r\n\r\n        {#if filetag==\"scan\"}\r\n          <div class=\"row\" id=\"depletionRow\" style=\"display:none\">\r\n              <div class=\"level\">\r\n                <div class=\"level-left\">\r\n\r\n                  {#each [\"ResON\", \"ResOFF\"] as name}\r\n\r\n                    <div class=\"level-item\">\r\n                      <div class=\"field\">\r\n                        <label class=\"label\"><h1 class=\"subtitle\">{name} file</h1></label>\r\n                        <div class=\"control\">\r\n                          <div class=\"select\">\r\n                            <select id={name}>\r\n                              {#if folderFile.files != undefined}\r\n                                {#each folderFile.files as scanfile}\r\n                                    <option value={scanfile}>{scanfile}</option>\r\n                                {/each}\r\n                              {/if}\r\n                            </select>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  {/each}\r\n\r\n                  {#each depletionLabels as {name, id}}\r\n\r\n                    <div class=\"level-item\">\r\n\r\n                      <div class=\"field\">\r\n                        <label class=\"label\"><h1 class=\"subtitle\">{name}</h1></label>\r\n                        <div class=\"control\">\r\n                          {#if name==\"Power (ON, OFF)\"}\r\n                            <input class=\"input\" type=\"text\" bind:value={powerinfo} {id}>\r\n                          {:else if  name==\"FELIX Hz\"}\r\n                            <input class=\"input\" type=\"number\" bind:value={nshots} {id}>\r\n                          {:else if  name==\"Mass Index\"}\r\n                            <input class=\"input\" type=\"number\" bind:value={massIndex} {id}>\r\n                          {:else if  name==\"TimeStart Index\"}\r\n                            <input class=\"input\" type=\"number\" bind:value={timestartIndex} {id}>\r\n                          {/if}\r\n                        </div>\r\n                      </div>\r\n\r\n                    </div>\r\n                  {/each}\r\n\r\n                  <div class=\"level-item\" style=\"margin-top:2em\">\r\n                    <button class=\"funcBtn button animated is-link\" id=\"depletionSubmit\" on:click={depletionPlot}>Submit</button>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n\r\n              \r\n          </div>\r\n        {/if}\r\n\r\n        {#if filetag === \"mass\"}\r\n\r\n          <!-- NIST find molecule row -->\r\n          <div class=\"row\" id=\"nist_row\" style=\"display:none\">\r\n            <div class=\"level\">\r\n              <div class=\"level-left\">\r\n\r\n                <div class=\"level-item\">\r\n                  <input class=\"input\" type=\"text\" placeholder=\"Molecule name\" \r\n                  data-tippy=\"Enter molecule name\" bind:value={nist_mname} on:change=\"{()=>set_nist_url(\"by_name\")}\"/>\r\n                </div>\r\n\r\n                <div class=\"level-item\">\r\n                  <input class=\"input\" type=\"text\" placeholder=\"Molecule Formula\" \r\n                  data-tippy=\"Enter molecule formula\" bind:value={nist_mformula} on:change=\"{()=>set_nist_url(\"by_formula\")}\"/>\r\n                </div>\r\n\r\n                <div class=\"level-item\">\r\n                  <button class=\"button {internet_active}\">{internet_connection}</button>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Find mass peaks row -->\r\n          <div class=\"row\" id=\"mass_peak_find_row\" style=\"display:block; padding-bottom:1em;\">\r\n            <div class=\"level\">\r\n              <div class=\"level-left\">\r\n\r\n                <div class=\"level-item\">\r\n                  <div class=\"select\">\r\n                    <select id=\"massFiles\">\r\n                        {#each fileChecked as file}\r\n                          <option>{file}</option>\r\n                        {/each}\r\n                      </select>\r\n                  </div>\r\n                </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" placeholder=\"Peak prominance value\"\r\n                        data-tippy=\"Peak prominace value\" bind:value={mass_prominence} on:change={find_masspec_peaks} min=\"0\" step=\"0.5\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" placeholder=\"Peak width\"\r\n                        data-tippy=\"Optional: Peak width\" bind:value={mass_peak_width} on:change={find_masspec_peaks} min=\"0\" step=\"0.5\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" placeholder=\"Peak Height\"\r\n                        data-tippy=\"Optional: Peak Height\" bind:value={mass_peak_height} on:change={find_masspec_peaks} min=\"0\" step=\"0.5\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button is-link hvr-glow funcBtn animated\"\r\n                        id=\"mass_get_peaks\" on:click={find_masspec_peaks} >Get Peaks\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button is-danger hvr-glow funcBtn animated\"\r\n                        id=\"mass_clear_peaks\" on:click={clear_mass_peaks} data-tippy=\"Clear all peaks\">Clear\r\n                      </div>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        {/if}\r\n\r\n      </div>\r\n\r\n      <div class=\"row box plotContainer\" id=\"{filetag}plotMainContainer\" >\r\n        \r\n        <div class=\"container is-fluid\" id=\"{filetag}plotContainer\">\r\n          {#each plotID as id}\r\n\r\n            {#if filetag == 'scan'}\r\n              <div class=\"columns is-multiline\" {id} style=\"padding-bottom:1em\">\r\n                {#each fileChecked as scanfile}\r\n                  <div class=\"column is-half\" id=\"{scanfile}_tplot\" style=\"padding-bottom:1em\" />\r\n                {/each}\r\n              </div>\r\n\r\n            {:else if id == 'avgplot'}\r\n\r\n              <div {id} style=\"padding-bottom:1em\" />\r\n\r\n              <div class=\"level\" style=\"display:{exp_fitall_div}\">\r\n                <div class=\"level-left\">\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" id=\"peak_prominance\" placeholder=\"Peak prominance value\"\r\n                        data-tippy=\"Peak prominace value\" bind:value={prominence} on:change={expfit_func} min=\"0\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" id=\"peak_width_fit\" placeholder=\"Peak width\"\r\n                        data-tippy=\"Optional: Peak width\" bind:value={peak_width} on:change={expfit_func} min=\"0\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <input class=\"input\" type=\"number\" id=\"peak_height_fit\" placeholder=\"Peak height\"\r\n                        data-tippy=\"Optional: Peak height\" bind:value={peak_height} on:change={expfit_func} min=\"0\"/>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn animated {findPeak_btnCSS}\"\r\n                        id=\"find_expfit_peaks\" on:click={findPeak} data-tippy=\"Find the peaks by adjusting the prominence value\">Get Peaks\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                    <div class=\"select\">\r\n                      <select id=\"fitFiles\" bind:value={fit_files}>\r\n                          {#each fit_file_list as file}\r\n                            <option>{file}</option>\r\n                          {/each}\r\n                        </select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn animated {fitallPeak_btnCSS}\"\r\n                        id=\"fitall_expfit_peaks\" data-tippy=\"Fit all the peaks positions found using gaussian\" on:click={fitall}>Fit\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn animated {fitall_tkplot_Peak_btnCSS}\"\r\n                        id=\"fitall_tkplot_expfit_peaks\" data-tippy=\"Fit all the peaks positions found using gaussian\" on:click=\"{()=>fitall(true, 'fitall_tkplot_expfit_peaks', 'general')}\">Open in Matplotlib\r\n                      </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"level\" style=\"display:{expfitDiv}\">\r\n                <div class=\"level-left\">\r\n\r\n                  <div class=\"level-item\">\r\n                    <div class=\"select\">\r\n                      <select id=\"expfitFiles\" bind:value={fit_files}>\r\n                          {#each fit_file_list as file}\r\n                            <option>{file}</option>\r\n                          {/each}\r\n                        </select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                    <div class=\"level-item button hvr-glow funcBtn is-link animated\"\r\n                      id=\"exp_fit\" on:click={functionRun} data-tippy=\"Choose the file from the dropdown --> Fit\">Exp. Fit\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                    <div class=\"pretty p-switch p-slim\" style=\"margin-left:1em;\" data-tippy=\"Overwrite existing expfit file with only new values ? or else will append to existing file\">\r\n                        <input type=\"checkbox\" id=\"overwrite_expfit\"/>\r\n                        <div class=\"state p-info p-on\">\r\n                            <label>Overwrite</label>\r\n                        </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn animated {clear_last_Peak_btnCSS}\"\r\n                        id=\"clearLast_plotted_peaks\" on:click={clearLastPeak} data-tippy=\"Clear last fitted lines\">Clear last\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn animated {clear_all_Peak_btnCSS}\"\r\n                        id=\"clearAll_plotted_peaks\" on:click={clearAllPeak} data-tippy=\"Clear all fitted lines\">Clear all\r\n                      </div>\r\n                  </div>\r\n\r\n                  <div class=\"level-item\">\r\n                      <div class=\"level-item button hvr-glow funcBtn is-link animated\"\r\n                        id=\"findall_expfit_toggle\" on:click=\"{()=>exp_fitall_div_status = !exp_fitall_div_status}\">Find Peaks\r\n                      </div>\r\n                  </div>\r\n\r\n                  {#if expfit_log_display}\r\n                    <div class=\"level-item\" in:fade out:fly=\"{{ y: 50, duration: 1000 }}\" id=\"expfit_log_id\">\r\n                      <label class=\"label\" style=\"font-weight:400\">{expfit_log}</label>\r\n                    </div>\r\n                  {/if}\r\n                </div>\r\n              </div>\r\n            \r\n            {:else if filetag===\"mass\"}\r\n\r\n              <!-- mplot row -->\r\n              <div {id} style=\"padding-bottom:1em;\" />\r\n              \r\n              <!-- NIST webview -->\r\n              <div class=\"row\" id=\"nistWebview_rows\" style=\"display:none\">\r\n\r\n                <!-- NIST webview navigator -->\r\n                <div class=\"row\">\r\n                  <div class=\"level\">\r\n                    <div class=\"level-left\">\r\n\r\n                      <div class=\"level-item webviewIcon hvr-glow\" on:click=\"{()=>nist_webview.goToIndex(0)}\">\r\n                        <span class=\"icon\"><i class=\"fas fa-home\"></i></span>\r\n                      </div>\r\n\r\n                      <!-- <div class=\"level-item\">\r\n                        <input class=\"input\" type=\"text\" placeholder=\"Google Search engine\" \r\n                        data-tippy=\"Google Search engine\" bind:value={search_string} on:change=\"{()=>nist_url=google_search}\"/>\r\n                      </div> -->\r\n\r\n                      <div class=\"level-item webviewIcon hvr-glow\" on:click=\"{()=>{if(nist_webview.canGoBack()) {nist_webview.goBack()}}}\">\r\n                        <span class=\"icon\"><i class=\"fas fa-arrow-left\"></i></span>\r\n                      </div>\r\n\r\n                      <div class=\"level-item webviewIcon hvr-glow\" on:click=\"{()=>{if(nist_webview.canGoForward()) {nist_webview.goForward()}}}\">\r\n                        <span class=\"icon\"><i class=\"fas fa-arrow-right\"></i></span>\r\n                      </div>\r\n\r\n                      <div class=\"level-item webviewIcon hvr-glow\" on:click=\"{()=>nist_webview.reload()}\">\r\n                        <span class=\"icon\"><i class=\"fas fa-undo\"></i></span>\r\n                      </div>\r\n                      \r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                \r\n                <!-- NIST webview -->\r\n                <div class=\"row\"><webview src={nist_url} id=\"nist_webview\"></webview></div>\r\n\r\n              </div>\r\n            \r\n            {:else}\r\n              <div {id} style=\"padding-bottom:1em\" />\r\n            {/if}\r\n          {/each}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</section>\r\n",
    "<script>\r\n  import { spring } from 'svelte/motion';\r\n\r\n  function pannable(node) {\r\n    let x;\r\n    let y;\r\n\r\n    function handleMousedown(event) {\r\n      x = event.clientX;\r\n      y = event.clientY;\r\n\r\n      node.dispatchEvent(new CustomEvent('panstart', {\r\n        detail: { x, y }\r\n      }));\r\n\r\n      window.addEventListener('mousemove', handleMousemove);\r\n      window.addEventListener('mouseup', handleMouseup);\r\n    }\r\n\r\n    function handleMousemove(event) {\r\n      const dx = event.clientX - x;\r\n      const dy = event.clientY - y;\r\n      x = event.clientX;\r\n      y = event.clientY;\r\n\r\n      node.dispatchEvent(new CustomEvent('panmove', {\r\n        detail: { x, y, dx, dy }\r\n      }));\r\n    }\r\n\r\n    function handleMouseup(event) {\r\n      x = event.clientX;\r\n      y = event.clientY;\r\n\r\n      node.dispatchEvent(new CustomEvent('panend', {\r\n        detail: { x, y }\r\n      }));\r\n\r\n      window.removeEventListener('mousemove', handleMousemove);\r\n      window.removeEventListener('mouseup', handleMouseup);\r\n    }\r\n\r\n    node.addEventListener('mousedown', handleMousedown);\r\n\r\n    return {\r\n      destroy() {\r\n        node.removeEventListener('mousedown', handleMousedown);\r\n      }\r\n    };\r\n  }\r\n\r\n  const coords = spring({ x: 0, y: 0 }, {\r\n      stiffness: 0.2,\r\n      damping: 0.4\r\n  });\r\n\r\n  function handlePanStart() {\r\n      coords.stiffness = coords.damping = 1;\r\n  }\r\n\r\n  function handlePanMove(event) {\r\n      coords.update($coords => ({\r\n          x: $coords.x + event.detail.dx,\r\n          y: $coords.y + event.detail.dy\r\n      }));\r\n  }\r\n\r\n  function handlePanEnd(event) {\r\n      coords.stiffness = 0.2;\r\n      coords.damping = 0.4;\r\n      coords.set({ x: 0, y: 0 });\r\n  }\r\n</script>\r\n\t\t\t\r\n<style>\r\n\r\n.container {\r\n    border: 5px solid #fafafaa6;\r\n    padding: 2em;\r\n    box-shadow: 12px 12px 2px 1px #7a7a7a96;\r\n  }\r\n\t\t\t\r\n</style>\r\n\r\n<div class=\"container\" use:pannable\r\n    on:panstart={handlePanStart} on:panmove={handlePanMove} on:panend={handlePanEnd}\r\n    style=\"transform:\r\n      translate({$coords.x}px,{$coords.y}px)\r\n      rotate({$coords.x * 0.2}deg)\">\r\n  <slot></slot>\r\n\r\n</div>",
    "<script>\r\n  export let jq;\r\n  export let currentLocation;\r\n  export let filetag;\r\n  export let updateFolder;\r\n  export let getCheckedFiles;\r\n  export let path;\r\n\r\n  let folderFile;\r\n  $: if (!currentLocation) {\r\n    console.log(`Currentlocation: [${filetag}]: is undefined`);\r\n  } else {\r\n    folderFile = updateFolder(currentLocation);\r\n  }\r\n\r\n  const refreshFolder = event => {\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n    folderFile = updateFolder(currentLocation);\r\n  };\r\n\r\n  const changeDir = dir => {\r\n    if (currentLocation == undefined) {\r\n      return console.log(\"Location undefined\");\r\n    }\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n    currentLocation = path.join(currentLocation, dir);\r\n    jq(`.${filetag}-files`).each((index, val) => (val.checked = false));\r\n  };\r\n\r\n  function selectAllToggle(event) {\r\n    jq(`.${filetag}-files`).each((index, val) => {\r\n      let parent = document.getElementsByClassName(val.id)[0];\r\n      if (parent.style.display == \"block\") {\r\n        val.checked = event.target.checked;\r\n      }\r\n    });\r\n    getCheckedFiles();\r\n  }\r\n\r\n  let searchKey;\r\n\r\n  const search = () => {\r\n    folderFile.files.forEach(file => {\r\n      let fileParent = document.getElementsByClassName(file)[0];\r\n      file.includes(searchKey)\r\n        ? (fileParent.style.display = \"block\")\r\n        : (fileParent.style.display = \"none\");\r\n    });\r\n  };\r\n\r\n  const folderToggle = () => {\r\n    let $folderContainer = jq(`#${filetag}FileContainer`);\r\n    let $folderIcon = jq(`#${filetag}FolderContainer i`);\r\n\r\n    // Toggling folder\r\n    $folderContainer.toggle();\r\n\r\n    if ($folderContainer[0].style.display === \"none\")\r\n      $folderIcon.removeClass(\"fa-rotate-90\");\r\n    else $folderIcon.addClass(\"fa-rotate-90\");\r\n  };\r\n\r\n  let display = \"block\";\r\n  let visible = true;\r\n  $: visible ? (display = \"block\") : (display = \"none\");\r\n  let animation = \"animated fadeIn\";\r\n\r\n</script>\r\n\r\n<style>\r\n \r\n  .menu-list {\r\n    padding-left: 2em;\r\n  }\r\n  .menu-label,\r\n  .backbtn,\r\n  .refresh {\r\n    cursor: pointer;\r\n  }\r\n\r\n  :focus {\r\n    outline-color: transparent;\r\n  }\r\n\r\n  ul {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  .filexplorer {\r\n    max-height: 60vh;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  .folderContainerPanelBlock {\r\n    height:70vh;\r\n    overflow: auto;\r\n  }\r\n\r\n .otherFolderList {\r\n    margin-top: 1em;\r\n  }\r\n  \r\n</style>\r\n\r\n<nav class=\"panel\">\r\n\r\n  <div class=\"panel-heading\">\r\n    <div class=\"level\">\r\n\r\n      <div class=\"level-left\">\r\n        <div class=\"level-item\">\r\n          <span class={animation} style=\"display:{display}\">File Explorer</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"level-right\">\r\n        <div class=\"level-item {animation}\" style=\"display:{display}\">\r\n          <span\r\n            class=\"icon refresh hvr-icon-spin\"\r\n            id=\"{filetag}refresh\"\r\n            on:click={refreshFolder}>\r\n            <i\r\n              class=\"fas fa-sync refreshIcon hvr-icon\"\r\n              id=\"{filetag}refreshIcon\"\r\n              aria-hidden=\"true\" />\r\n          </span>\r\n        </div>\r\n        <div class=\"level-item {animation}\" style=\"display:{display}\">\r\n          <span\r\n            class=\"icon backbtn hvr-icon-back\"\r\n            id=\"{filetag}BackButton\"\r\n            on:click={() => changeDir('..')}>\r\n            <i\r\n              class=\"fas fa-angle-left hvr-icon\"\r\n              aria-hidden=\"true\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n\r\n  <div id=\"{filetag}panel-block\" class={animation} style=\"display:{display}\">\r\n    \r\n    <div class=\"panel-block\">\r\n      <p class=\"control has-icons-left\">\r\n        <input\r\n          class=\"input is-small \"\r\n          type=\"text\"\r\n          placeholder=\"Search {filetag} files\"\r\n          id=\"{filetag}-searchFiles\"\r\n          bind:value={searchKey}\r\n          on:keyup={search} />\r\n        <span class=\"icon is-small is-left\">\r\n          <i class=\"fas fa-search\" aria-hidden=\"true\" />\r\n        </span>\r\n\r\n      </p>\r\n    </div>\r\n    \r\n    <div class=\"panel-block\" style=\"height:2em;\">\r\n      <div class=\"animated fadeIn\" id=\"{filetag}locationUpdate\" style=\"display:none\">Location Update</div>\r\n    </div>\r\n    \r\n    <div class=\"panel-block folderContainerPanelBlock\">\r\n\r\n      <ul>\r\n\r\n        {#if folderFile != undefined}\r\n          <li>\r\n            <aside class=\"menu\" id=\"{filetag}FileBrowser\">\r\n\r\n              <div class=\"menu-label has-text-white\" id=\"{filetag}FolderContainer\">\r\n                <span class=\"icon\" on:click={folderToggle}>\r\n                  <i class=\"fas fa-angle-right fa-rotate-90\" aria-hidden=\"true\" />\r\n                </span>\r\n                <span>{folderFile.parentFolder}</span>\r\n              </div>\r\n\r\n              <ul class=\"menu-list filexplorer\" id=\"{filetag}FileContainer\">\r\n                \r\n                {#if folderFile.files.length > 0}\r\n                  <li>\r\n                    <div class=\"pretty p-icon p-round p-pulse\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id=\"{filetag}selectall\"\r\n                        on:click={selectAllToggle} />\r\n                      <div class=\"state p-primary\">\r\n                        <i class=\"icon mdi mdi-check\" />\r\n                        <label>Select All</label>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                {:else}\r\n                  <li><div >No {filetag} files here</div></li>\r\n                {/if}\r\n\r\n                {#each folderFile.files.sort() as filename}\r\n                  <li class={filename} style=\"display:block;\">\r\n                    <div class=\"pretty p-icon p-round p-smooth\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={filename}\r\n                        class=\"{filetag}-files\"\r\n                        on:click={getCheckedFiles} />\r\n                      <div class=\"state p-success\">\r\n                        <i class=\"icon mdi mdi-check\" />\r\n                        <label for={filename}>{filename}</label>\r\n                      </div>\r\n                    </div>\r\n                  </li>\r\n                {/each}\r\n\r\n              </ul>\r\n            </aside>\r\n          </li>\r\n          \r\n          <li class=\"otherFolderList\">\r\n            <ul>\r\n              {#each folderFile.folders as foldername}\r\n                  <li>\r\n                    <aside class=\"menu\">\r\n                      <div class=\"menu-label has-text-white\">\r\n                        <span class=\"icon\">\r\n                          <i class=\"fas fa-angle-right\" aria-hidden=\"true\" />\r\n                        </span>\r\n                        <span id={foldername} on:click={() => changeDir(foldername)}>\r\n                          {foldername}\r\n                        </span>\r\n                      </div>\r\n                    </aside>\r\n                  </li>\r\n              {/each}\r\n            </ul>\r\n          </li>\r\n        {:else}\r\n            <li><h1 class=\"subtitle\">Browse to load files</h1></li>\r\n        {/if}\r\n        \r\n      </ul>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</nav>\r\n"
  ],
  "names": [],
  "mappings": "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"
}