{
  "version": 3,
  "file": "svelte.css",
  "sources": [
    "..\\src\\components\\Welcome.svelte",
    "..\\src\\components\\Container.svelte",
    "..\\src\\components\\Powerfile.svelte",
    "..\\src\\components\\Header.svelte",
    "..\\src\\components\\utils\\Filebrowser.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  export let jq;\r\n  jq(document).ready(()=>{\r\n    jq(\"#Welcome\").css(\"display\", \"block\");\r\n  })\r\n</script>\r\n\r\n<style>\r\n  #Welcome {\r\n    margin-top: 15% !important;\r\n    display: none;\r\n  }\r\n  .container {\r\n    border: 5px solid #fafafaa6;\r\n    padding: 2em;\r\n    box-shadow: 12px 12px 2px 1px #7a7a7a96;\r\n  }\r\n</style>\r\n\r\n<section class=\"section animated fadeInDown\" id=\"Welcome\">\r\n  <div class=\"container\">\r\n    <h1 class=\"title\">FELion Spectrum Analyser</h1>\r\n    <h2 class=\"subtitle\">To analyse FELIX data for FELion Instrument.</h2>\r\n  </div>\r\n</section>",
    "<script>\r\n\r\n  // Importing Svelte modules\r\n  import Filebrowser from \"./utils/Filebrowser.svelte\";\r\n  import { runPlot } from \"./utils/js/felion_main.js\";\r\n\r\n  import * as dirTree from \"directory-tree\";\r\n\r\n  export let id;\r\n  export let filetag;\r\n  export let filetype;\r\n  export let funcBtns;\r\n  export let plotID;\r\n\r\n  export let checkBtns;\r\n  export let jq;\r\n\r\n  export let electron;\r\n\r\n  export let path;\r\n\r\n  export let menu;\r\n  export let MenuItem;\r\n\r\n  menu.append(new MenuItem({ label: `Open ${filetag} plot in Matplotlib`, click() {\r\n\r\n      let obj = {\r\n        fullfiles: fullfiles,\r\n        filetag:filetag,            \r\n        filetype: \"general\",\r\n        btname: `${filetag}_Matplotlib`,\r\n        pyfile: fileInfo[filetag][\"pyfile\"],\r\n        args: fileInfo[filetag][\"args\"]\r\n      }\r\n      runPlot(obj);\r\n    } \r\n  }))\r\n\r\n  jq(document).ready(() => {\r\n    jq(\"#theoryBtn\")\r\n      .addClass(\"fadeInUp\").css(\"display\", \"none\");\r\n  });\r\n\r\n  const join = file => {\r\n    return [path.join(currentLocation, file)];\r\n  };\r\n\r\n  let delta = 1;\r\n  const changeDelta = event => {\r\n    if (event.key == \"Enter\") {\r\n      runPlot({\r\n        fullfiles: fullfiles,\r\n        filetype: filetag,\r\n        btname: \"felixPlotBtn\",\r\n        pyfile: \"normline.py\",\r\n        normethod: normlog,\r\n        args: delta\r\n      });\r\n    }\r\n  };\r\n\r\n  let normMethod = \"Log\";\r\n  let normlog = true;\r\n  $: normMethod == \"Relative\" ? (normlog = false) : (normlog = true);\r\n  let log;\r\n  $: filetag == \"mass\" ? (log = true) : (log = false);\r\n\r\n  const linearlogCheck = event => {\r\n    let target = event.target;\r\n    let layout = {\r\n      yaxis: {\r\n        title: \"Counts\",\r\n        type: target.checked ? \"log\" : null\r\n      }\r\n    };\r\n    if (filetag == \"mass\") {\r\n      Plotly.relayout(\"mplot\", layout);\r\n    } else {\r\n      fileChecked.forEach(file => {\r\n        let tplot = file + \"_tplot\";\r\n        Plotly.relayout(tplot, layout);\r\n      });\r\n    }\r\n  };\r\n\r\n  let folderFile = { folders: [], files: [] };\r\n\r\n  let tree = dirTree.default;\r\n  const style = \"display:none;\";\r\n  let currentLocation;\r\n\r\n  let allFiles = [];\r\n  $: fileChecked = allFiles.filter(file => file.checked).map(file => file.id);\r\n  $: console.log(\"fileChecked\", fileChecked);\r\n  $: fullfiles = fileChecked.map(file => path.join(currentLocation, file));\r\n\r\n  const getCheckedFiles = () => {\r\n    allFiles = Array.from(document.querySelectorAll(\".\" + filetag + \"-files\"));\r\n  };\r\n\r\n  const updateFolder = location => {\r\n    console.log(\"Folder updating\");\r\n    currentLocation = location;\r\n\r\n    if (currentLocation == undefined) {\r\n      jq(`#${filetag}refreshIcon`).removeClass(\"fa-spin\");\r\n      console.log(\"Location undefined\");\r\n      return undefined;\r\n    }\r\n\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n\r\n    let folder = [];\r\n    let file = [];\r\n\r\n    const folderTree = tree(\r\n      currentLocation,\r\n      { extensions: new RegExp(filetag) },\r\n      (item, PATH, stats) => {\r\n        console.log(item);\r\n      }\r\n    );\r\n\r\n    let folderChild = folderTree.children;\r\n    for (let i in folderChild) {\r\n      folderChild[i].type == \"file\"\r\n        ? (file = [folderChild[i].name, ...file])\r\n        : (folder = [folderChild[i].name, ...folder]);\r\n    }\r\n    folderFile.parentFolder = folderTree.name;\r\n    folderFile.folders = folder;\r\n    folderFile.files = file;\r\n\r\n    console.log(\"Folder updated\");\r\n\r\n    jq(`#${filetag}refreshIcon`).removeClass(\"fa-spin\");\r\n    return folderFile;\r\n  };\r\n\r\n  function browseFile({theory=false}) {\r\n    if (theory == true) {\r\n      return new Promise((resolve, reject) => {\r\n        let files;\r\n\r\n        console.log(\"Optional file\");\r\n        const options = {\r\n          title: `Open theory files`,\r\n          filters: [{ name: \"All files\", extensions: [\"*\"] }],\r\n          properties: [\"openFile\", \"multiSelections\"],\r\n          message: `Open theory files` //For macOS\r\n        };\r\n        electron.remote.dialog.showOpenDialog(null, options, filePaths => {\r\n          if (filePaths == undefined) reject(\"No files selected\");\r\n\r\n          resolve(filePaths);\r\n        });\r\n      });\r\n    } \r\n    \r\n    else {\r\n      const options = {\r\n        title: `Open ${filetag} files`,\r\n        filters: [\r\n          { name: `${filetag} files`, extensions: filetype.split(\", \") },\r\n          { name: \"All files\", extensions: [\"*\"] }\r\n        ],\r\n        properties: [\"openFile\", \"multiSelections\"],\r\n        message: `Open ${filetag} files` //For macOS\r\n      };\r\n      electron.remote.dialog.showOpenDialog(null, options, filePaths => {\r\n        if (filePaths == undefined) return console.log(\"No files selected\");\r\n        currentLocation = path.dirname(filePaths[0]);\r\n        folderFile = updateFolder(currentLocation);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  let delta_thz = 10\r\n  const fileInfo = {\r\n\r\n    // Create baseline matplotlib\r\n\r\n    felix:{\r\n      pyfile:\"baseline.py\",\r\n      args:[]\r\n    },\r\n\r\n    // Masspec matplotlib\r\n\r\n    mass:{\r\n      pyfile:\"mass.py\",\r\n      args:\"plot\"\r\n    },\r\n\r\n    // Timescan matplotlib\r\n\r\n    scan:{\r\n      pyfile:\"timescan.py\",\r\n      args:\"plot\"\r\n    },\r\n\r\n    // THz scan matplotlib\r\n\r\n    thz:{\r\n\r\n      pyfile:\"thz_scan.py\",\r\n      args:[delta_thz, \"plot\"]\r\n      \r\n    }\r\n  }\r\n\r\n  const functionRun = event => {\r\n    let btname = event.target.id;\r\n\r\n    if (btname === \"createBaselineBtn\"){btname=\"felix_Matplotlib\"}\r\n\r\n    switch (btname) {\r\n\r\n      ////////////// FELIX PLOT //////////////////////\r\n\r\n      case \"felixPlotBtn\":\r\n\r\n        Plotly.purge(\"exp-theory-plot\");\r\n        runPlot({\r\n          fullfiles: fullfiles, filetype: filetag, btname: btname,\r\n          pyfile: \"normline.py\", normethod: normlog, args: delta\r\n        });\r\n      \r\n      break;\r\n      \r\n      ////////////// Matplotlib PLOT //////////////////////\r\n\r\n      case `${filetag}_Matplotlib`:\r\n\r\n        let scriptname = fileInfo[filetag][\"pyfile\"]\r\n        let options = {args:[...fullfiles, fileInfo[filetag][\"args\"]]}\r\n\r\n        let obj = {\r\n            fullfiles: fullfiles,\r\n            filetag:filetag,            \r\n            filetype: \"general\",\r\n            btname: event.target.id,\r\n            pyfile: fileInfo[filetag][\"pyfile\"],\r\n            args: fileInfo[filetag][\"args\"]\r\n          }\r\n\r\n        runPlot(obj);\r\n\r\n      break;\r\n\r\n      ////////////// Masspec PLOT //////////////////////\r\n\r\n      case \"massPlotBtn\":\r\n          runPlot({\r\n            fullfiles: fullfiles,\r\n            filetype: filetag,\r\n            btname: btname,\r\n            pyfile: \"mass.py\",\r\n            args: \"run\"\r\n          });\r\n      break;\r\n\r\n      ////////////// Timescan PLOT //////////////////////\r\n\r\n      case \"timescanBtn\":\r\n          fileChecked.forEach(file => {\r\n              runPlot({\r\n                fullfiles: join(file),\r\n                filetype: filetag,\r\n                btname: btname,\r\n                pyfile: \"timescan.py\",\r\n                plotArea: file + \"_tplot\"\r\n              });\r\n            });\r\n      break;\r\n\r\n      ////////////// THz PLOT //////////////////////\r\n\r\n      case \"thzBtn\":\r\n           runPlot({\r\n            fullfiles: fullfiles,\r\n            filetype: filetag,\r\n            btname: btname,\r\n            pyfile: \"thz_scan.py\",\r\n            args: [delta_thz, \"run\"]\r\n          });\r\n      break;\r\n\r\n\r\n      ////////////// Toggle buttons //////////////////////\r\n\r\n      case \"theoryBtn\": \r\n        jq(\"#theoryRow\").toggle()\r\n      break;\r\n\r\n      case \"depletionscanBtn\":\r\n        jq(\"#depletionRow\").toggle()\r\n      break;\r\n\r\n      ////////////////////////////////////////////////////\r\n    \r\n      default:\r\n        break;\r\n      //////////////////////////////////////////////////// \r\n    }\r\n  };\r\n\r\n  let theoryfiles=[];\r\n  $: theoryfilenames = theoryfiles.map(file=>path.basename(file))\r\n  \r\n  function opentheory() {\r\n    browseFile({theory:true})\r\n      .then(file =>  theoryfiles = file).catch(err => console.log(err));\r\n  }\r\n\r\n  function runtheory() {\r\n    runPlot({fullfiles: theoryfiles, filetype: \"theory\", \r\n      btname: \"appendTheory\", pyfile: \"theory.py\", args: [normMethod, sigma, scale, currentLocation] });\r\n  }\r\n  const runtheory_keyup = (event) => {if(event.key==\"Enter\") runtheory()}\r\n  let sigma=20; //Sigma value for felixplot thoery gaussian profile\r\n  let scale=1;\r\n\r\n  let powerinfo = \"21, 21\";\r\n  let nshots = 10;\r\n  let massIndex = 0;\r\n  let timestartIndex = 1;\r\n\r\n  let depletionLabels = [\r\n    {\r\n      name: \"Power (ON, OFF)\",\r\n      id: \"powerinfo\"\r\n    },\r\n    {\r\n      name: \"FELIX Hz\",\r\n      id: \"nshots\"\r\n    },\r\n    {\r\n      name: \"Mass Index\",\r\n      id: \"massIndex\"\r\n    },\r\n    {\r\n      name: \"TimeStart Index\",\r\n      id: \"timeIndex\"\r\n    }\r\n  ]\r\n\r\n  const depletionPlot = () => {\r\n\r\n    runPlot({fullfiles: [currentLocation], filetype: \"general\", \r\n      btname: \"depletionSubmit\", pyfile: \"depletionscan.py\", args: [jq(ResON).val(), jq(ResOFF).val(), powerinfo, nshots, massIndex, timestartIndex] });\r\n  }\r\n  \r\n  const changeTHz = (event) => {\r\n\r\n    if (event.key == \"Enter\") {\r\n      runPlot({\r\n          fullfiles: fullfiles,\r\n          filetype: filetag,\r\n          btname: \"thzBtn\",\r\n          pyfile: \"thz_scan.py\",\r\n          args: delta_thz\r\n        });\r\n    }\r\n\r\n  }\r\n\r\n</script>\r\n\r\n<style>\r\n  label {color:white;}\r\n  #theorylabel{\r\n    color:white;\r\n    border:solid 3px #bdc3c7; \r\n    padding:0.4em;\r\n  }\r\n  .locationLabel {\r\n    text-align: center;\r\n  }\r\n  .row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-bottom: 2em;\r\n  }\r\n  .funcBtn {\r\n    margin: 0 0.5em;\r\n  }\r\n\r\n  .section {\r\n    position: fixed;\r\n    width: 100%;\r\n  }\r\n  .plotContainer {\r\n    overflow-y: auto;\r\n    max-height: 38rem;\r\n    width: 70%;\r\n    position: absolute;\r\n  }\r\n  img {\r\n    width: 20%;\r\n    margin-left: 40%;\r\n  }\r\n  .data-loading {\r\n    display: none;\r\n  }\r\n\r\n  @media (max-width: 1200px) {\r\n    .plotContainer {\r\n      max-height: 27rem;\r\n    }\r\n  }\r\n\r\n  #theoryContainer {\r\n    margin-left: 20%;\r\n    margin-right:20%;\r\n  }\r\n</style>\r\n\r\n<section class=\"section\" {id} {style}>\r\n\r\n  <div class=\"columns\">\r\n\r\n    <div class=\"column is-3\" id=\"{filetag}filebrowserColumn\">\r\n      <Filebrowser\r\n        {filetag} {currentLocation} {updateFolder}\r\n        {getCheckedFiles} {jq} {path} />\r\n    </div>\r\n\r\n    <div class=\"column\">\r\n\r\n      <div class=\"row\">\r\n        <div class=\"field has-addons\">\r\n          <div class=\"control is-expanded\">\r\n            <input\r\n              class=\"input locationLabel\"\r\n              type=\"text\"\r\n              placeholder=\"Location will be displayed\"\r\n              id=\"{filetag}LocationLabel\"\r\n              bind:value={currentLocation} />\r\n          </div>\r\n          <div class=\"control\">\r\n            <div\r\n              class=\"button is-dark\"\r\n              on:click={browseFile}\r\n              data-tippy=\"Browse {filetag} file\">\r\n              Browse\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"level\">\r\n          <div class=\"level-left animated fadeIn\">\r\n\r\n            {#each funcBtns as { id, name }}\r\n              <div\r\n                class=\"level-item button funcBtn is-link animated\"\r\n                {id}\r\n                on:click={functionRun}>\r\n                {name}\r\n              </div>\r\n            {/each}\r\n\r\n            {#if filetag == 'felix'}\r\n              <div class=\"level-item\">\r\n                <div class=\"field has-addons\">\r\n                  <div class=\"control\">\r\n                    <span class=\"select\">\r\n                      <select\r\n                        id=\"felixmethod\"\r\n                        bind:value={normMethod}\r\n                        data-tippy=\"Normalisation method\">\r\n                        <option>Relative</option>\r\n                        <option>Log</option>\r\n                      </select>\r\n                    </span>\r\n                  </div>\r\n                  <div class=\"control\">\r\n                    <input\r\n                      class=\"input\"\r\n                      type=\"number\" step=\"0.5\"\r\n                      id=\"delta_value\"\r\n                      placeholder=\"Delta value\"\r\n                      data-tippy=\"Delta value for averaging FELIX spectrum\"\r\n                      bind:value={delta}\r\n                      on:keyup={changeDelta} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            {/if}\r\n\r\n            {#if filetag == 'thz'}\r\n              <div class=\"level-item\">\r\n\r\n                <div class=\"field has-addons\">\r\n                  <div class=\"control\"><div class=\"button is-static\">Delta (in KHz)</div></div>\r\n\r\n                  <div class=\"control\">\r\n                    <input\r\n                      class=\"input\"\r\n                      type=\"number\" step=\"0.5\"\r\n                      id=\"delta_value_thz\"\r\n                      placeholder=\"Delta value\"\r\n                      data-tippy=\"Delta value for spectrum (in KHz)\"\r\n                      bind:value={delta_thz}\r\n                      on:keyup={changeTHz} />\r\n                  </div>\r\n                  \r\n                </div>\r\n              </div>\r\n            {/if}\r\n\r\n            {#each checkBtns as {id, name, bind, help}}\r\n               <div class=\"level-item\">\r\n\r\n                <div class=\"pretty p-default p-curve p-toggle\" data-tippy={help}>\r\n\r\n                  {#if name[0]===\"Log\"}\r\n                    <input type=\"checkbox\" {id} checked={bind} on:click={linearlogCheck} />\r\n                  {:else}\r\n                    <input type=\"checkbox\" {id} checked={bind} on:click=\"{(e)=>{console.log(`Status (${e.target.id}):\\n ${e.target.checked}`)}}\"/>\r\n                  {/if}\r\n\r\n                  <div class=\"state p-success p-on\"> <label>{name[0]}</label> </div>\r\n                  <div class=\"state p-danger p-off\"> <label>{name[1]}</label> </div>\r\n\r\n                </div>\r\n                \r\n              </div>\r\n            {/each}\r\n\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      {#if filetag==\"felix\"}\r\n         <div class=\"row\" id=\"theoryRow\" style=\"display:none\">\r\n            <div class=\"container\" id=\"theoryContainer\">\r\n              <div class=\"field\">\r\n                <label class=\"label\" id=\"theorylabel\">\r\n                  <h1 class=\"subtitle\" id=\"theoryfilename\">{theoryfilenames}</h1>\r\n                </label>\r\n                <div class=\"control\">\r\n                    <button class=\"button is-warning\" on:click={opentheory}>Choose file</button>\r\n                    <input class=\"input\" type=\"number\" on:keyup={runtheory_keyup} bind:value={sigma} style=\"width:150px\" data-tippy=\"Sigma (deviation) from central frequency\">\r\n                    <input class=\"input\" type=\"number\" on:keyup={runtheory_keyup} step=\"0.001\" bind:value={scale} style=\"width:150px\" data-tippy=\"Scaling factor (to shift in position)\">\r\n                    <button class=\"funcBtn button is-link animated\" on:click={runtheory} id=\"appendTheory\">Submit</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n         </div>\r\n      {/if}\r\n\r\n      {#if filetag==\"scan\"}\r\n         <div class=\"row\" id=\"depletionRow\" style=\"display:none\">\r\n            <div class=\"level\">\r\n              <div class=\"level-left\">\r\n\r\n                {#each [\"ResON\", \"ResOFF\"] as name}\r\n\r\n                  <div class=\"level-item\">\r\n                    <div class=\"field\">\r\n                      <label class=\"label\"><h1 class=\"subtitle\">{name} file</h1></label>\r\n                      <div class=\"control\">\r\n                        <div class=\"select\">\r\n                          <select id={name}>\r\n                            {#if folderFile.files != undefined}\r\n                               {#each folderFile.files as scanfile}\r\n                                  <option value={scanfile}>{scanfile}</option>\r\n                               {/each}\r\n                            {/if}\r\n                          </select>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                {/each}\r\n\r\n                {#each depletionLabels as {name, id}}\r\n                  <div class=\"level-item\">\r\n                    <div class=\"field\">\r\n                      <label class=\"label\"><h1 class=\"subtitle\">{name}</h1></label>\r\n                      <div class=\"control\">\r\n                      {#if name==\"Power (ON, OFF)\"}\r\n                        <input class=\"input\" type=\"text\" bind:value={powerinfo} {id}>\r\n                      {:else if  name==\"FELIX Hz\"}\r\n                        <input class=\"input\" type=\"number\" bind:value={nshots} {id}>\r\n                      {:else if  name==\"Mass Index\"}\r\n                        <input class=\"input\" type=\"number\" bind:value={massIndex} {id}>\r\n                      {:else if  name==\"TimeStart Index\"}\r\n                        <input class=\"input\" type=\"number\" bind:value={timestartIndex} {id}>\r\n                      {/if}\r\n                          \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                {/each}\r\n              \r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"control\">\r\n              <button class=\"funcBtn button is-link animated\" id=\"depletionSubmit\" on:click={depletionPlot}>Submit</button>\r\n            </div>\r\n         </div>\r\n      {/if}\r\n\r\n      <hr style=\"margin: 0.5em 0; background-color:#bdc3c7\" />\r\n      <h1 class=\"subtitle\">Data Visualisation</h1>\r\n\r\n      <div class=\"row box plotContainer\">\r\n        <img\r\n          class=\"data-loading\"\r\n          id=\"{filetag}loading\"\r\n          src=\"./icons/loadingBar.svg\"\r\n          alt=\"loading data\" />\r\n        <div class=\"container is-fluid\" id=\"{filetag}plotContainer\">\r\n          {#each plotID as id}\r\n            {#if filetag == 'scan'}\r\n              <div {id} style=\"padding-bottom:1em\">\r\n                {#each fileChecked as scanfile}\r\n                  <div id=\"{scanfile}_tplot\" style=\"padding-bottom:1em\" />\r\n                {/each}\r\n              </div>\r\n            \r\n            {:else}\r\n              <div {id} style=\"padding-bottom:1em\" />\r\n            {/if}\r\n          {/each}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n</section>\r\n",
    "<script>\r\n\r\n    export let electron;\r\n    export let path;\r\n    export let jq;\r\n\r\n    import * as fs from 'fs';\r\n\r\n    const dialog = electron.remote.dialog;\r\n    let currentLocation;\r\n\r\n    let today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const yy = today.getFullYear().toString().substr(2);\r\n    today = `${dd}_${mm}_${yy}-#`;\r\n\r\n    $: filename = today+\".pow\";\r\n\r\n    let fileContent = `#POWER file\\n` +\r\n        `# 10 Hz FELIX\\n` +\r\n        `#SHOTS=26\\n` +\r\n        `#INTERP=linear\\n` +\r\n        `#    IN_no_UM (if one deletes the no the firs number will be in \\mu m\\n` +\r\n        `# wavelength/cm-1      energy/pulse/mJ\\n`\r\n\r\n    function browseFolder() {\r\n        const options = {\r\n            title: `Open a folder`,\r\n            properties: ['openDirectory'],\r\n            message: `Open a folder` //For macOS\r\n        };\r\n        dialog.showOpenDialog(null, options, (folder) => {\r\n            if (folder==undefined) return console.log(\"No files selected\");\r\n            currentLocation = folder[0];\r\n        });\r\n    };\r\n\r\n\r\n    const btnAnimate = (name, removeclass, addclass, timeout) =>{\r\n        jq(\"#powSaveBtn\").html(name).removeClass(removeclass).addClass(addclass);\r\n        setTimeout(()=>{jq(\"#powSaveBtn\").html(\"Save\").removeClass(addclass).addClass(removeclass);}, timeout)\r\n    };\r\n\r\n    function powSave() { \r\n\r\n        if(currentLocation==undefined) {return btnAnimate(\"Browse folder first !!!\", \"is-link\", \"is-danger animated shake faster\", 3000);}\r\n        fs.writeFile(path.join(currentLocation, filename), fileContent, (err) => {\r\n\r\n            btnAnimate(\"File saved\", \"is-link\", \"is-success animated bounce\", 2000);\r\n            if (err) throw err;\r\n        }) };\r\n\r\n</script>\r\n\r\n<style>\r\n.row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding-bottom: 2em;\r\n}\r\n#powerfileLocationLabel, #powfilename {text-align: center}\r\nlabel {color: white}\r\n.container {height: 70vh;}\r\n.columns {height: 100%;}\r\n#powfileContent_mainContainer {height: 70%;}\r\n#powfileContent_Container {height: 90%;}\r\n#powfileContents {height: 100%;}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: #3f3e3e; \r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #2222229d;\r\n}\r\n\r\n</style>\r\n\r\n<section class=\"section\" style=\"display:none\" id=\"Powerfile\">\r\n\r\n    <div class=\"container\">\r\n        <div class=\"columns\">\r\n            <div class=\"column\">\r\n\r\n                <div class=\"field has-addons\">\r\n                    <div class=\"control is-expanded\">\r\n                        <input class=\"input locationLabel\" type=\"text\" \r\n                        placeholder=\"Location will be displayed\" id=\"powerfileLocationLabel\" \r\n                        bind:value={currentLocation}>\r\n                    </div>\r\n                    <div class=\"control\">\r\n                        <div class=\"button is-dark\" on:click={browseFolder} data-tippy=\"Open a folder\">Browse</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\">\r\n                    <label class=\"label\">Filename</label>\r\n                    <div class=\"control\">\r\n                        <input class=\"input\" type=\"text\" placeholder=\"Filename\" id=\"powfilename\" bind:value={today}>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\" id=\"powfileContent_mainContainer\">\r\n                    <label class=\"label\">File Contents</label>\r\n                    <div class=\"control\" id=\"powfileContent_Container\">\r\n                        <textarea class=\"textarea\" placeholder=\"Textarea\" id=\"powfileContents\" bind:value={fileContent}></textarea>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"field\">\r\n                    <div class=\"control\">\r\n                        <button class=\"button is-link\" id=\"powSaveBtn\" on:click={powSave}>Save</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n</section>",
    "<script>\r\n  import * as electron from \"electron\";\r\n\r\n  const mainWindow = electron.remote.getCurrentWindow();\r\n  const maximize = () => {\r\n    mainWindow.isFullScreen()\r\n      ? mainWindow.setFullScreen(false)\r\n      : mainWindow.setFullScreen(true);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  #header {\r\n    -webkit-user-select: none;\r\n    -webkit-app-region: drag;\r\n  }\r\n\r\n  .navbar-item {\r\n    cursor: pointer;\r\n    -webkit-app-region: no-drag;\r\n    color: #fafafa;\r\n  }\r\n\r\n  #close:hover {\r\n    background: red;\r\n  }\r\n</style>\r\n\r\n<!-- Header -->\r\n<nav class=\"navbar is-fixed-top is-dark\" id=\"header\">\r\n\r\n  <div class=\"navbar-brand\">\r\n    <div class=\"navbar-item\">\r\n      <span class=\"icon\">\r\n        <i class=\"fas fa-chart-pie\" />\r\n      </span>\r\n      <span>FELion_GUI2.2</span>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"navbar-menu\">\r\n    <div class=\"navbar-end\">\r\n      <div class=\"navbar-item\" id=\"min\">\r\n        <i\r\n          class=\"fas fa-window-minimize\"\r\n          on:click={() => mainWindow.minimize()} />\r\n      </div>\r\n      <div class=\"navbar-item\" id=\"max\">\r\n        <i class=\"fas fa-compress-arrows-alt\" on:click={maximize} />\r\n      </div>\r\n      <div class=\"navbar-item\" id=\"close\">\r\n        <i class=\"fas fa-window-close\" on:click={() => mainWindow.close()} />\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</nav>\r\n",
    "<script>\r\n  export let jq;\r\n  export let currentLocation;\r\n  export let filetag;\r\n  export let updateFolder;\r\n  export let getCheckedFiles;\r\n\r\n  export let path;\r\n\r\n  $: folderFile = updateFolder(currentLocation);\r\n\r\n  const refreshFolder = event => {\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n    folderFile = updateFolder(currentLocation);\r\n  };\r\n\r\n  const changeDir = dir => {\r\n    if (currentLocation == undefined) {\r\n      return console.log(\"Location undefined\");\r\n    }\r\n    jq(`#${filetag}refreshIcon`).addClass(\"fa-spin\");\r\n    currentLocation = path.join(currentLocation, dir);\r\n    jq(`.${filetag}-files`).each((index, val) => (val.checked = false));\r\n  };\r\n\r\n  function selectAllToggle(event) {\r\n    jq(`.${filetag}-files`).each((index, val) => {\r\n      let parent = document.getElementsByClassName(val.id)[0];\r\n      if (parent.style.display == \"block\") {\r\n        val.checked = event.target.checked;\r\n      }\r\n    });\r\n    getCheckedFiles();\r\n  }\r\n\r\n  let searchKey;\r\n  const search = () => {\r\n    folderFile.files.forEach(file => {\r\n      let fileParent = document.getElementsByClassName(file)[0];\r\n      file.includes(searchKey)\r\n        ? (fileParent.style.display = \"block\")\r\n        : (fileParent.style.display = \"none\");\r\n    });\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .filexplorer {\r\n    overflow-y: auto;\r\n    position: absolute;\r\n    max-height: 75vh;\r\n    width: 20%;\r\n  }\r\n  .menu-list {\r\n    padding-left: 2em;\r\n  }\r\n  .menu-label,\r\n  .backbtn,\r\n  .refresh {\r\n    cursor: pointer;\r\n  }\r\n\r\n  :focus {\r\n    outline-color: transparent;\r\n  }\r\n</style>\r\n\r\n<nav class=\"panel filexplorer\">\r\n  <div class=\"panel-heading\">\r\n    <div class=\"level\">\r\n\r\n      <div class=\"level-left\">\r\n        <div class=\"level-item\">\r\n          <span>File Explorer</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"level-right\">\r\n        <div class=\"level-item\">\r\n          <span\r\n            class=\"icon refresh\"\r\n            id=\"{filetag}refresh\"\r\n            on:click={refreshFolder}>\r\n            <i\r\n              class=\"fas fa-sync refreshIcon\"\r\n              id=\"{filetag}refreshIcon\"\r\n              data-tippy=\"Refresh folder\"\r\n              aria-hidden=\"true\" />\r\n          </span>\r\n        </div>\r\n        <div class=\"level-item\">\r\n          <span\r\n            class=\"icon backbtn\"\r\n            id=\"{filetag}BackButton\"\r\n            on:click={() => changeDir('..')}>\r\n            <i\r\n              class=\"fas fa-angle-left\"\r\n              data-tippy=\"Go back (location)\"\r\n              aria-hidden=\"true\" />\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class=\"panel-block\">\r\n    <p class=\"control has-icons-left\">\r\n      <input\r\n        class=\"input is-small\"\r\n        type=\"text\"\r\n        placeholder=\"Search {filetag} files\"\r\n        id=\"{filetag}-searchFiles\"\r\n        bind:value={searchKey}\r\n        on:keyup={search} />\r\n      <span class=\"icon is-small is-left\">\r\n        <i class=\"fas fa-search\" aria-hidden=\"true\" />\r\n      </span>\r\n\r\n    </p>\r\n  </div>\r\n\r\n  {#if folderFile != undefined}\r\n    <div class=\"panel-block\">\r\n      <aside class=\"menu\" id=\"{filetag}FileBrowser\">\r\n\r\n        <div class=\"menu-label has-text-white\" id=\"{filetag}FolderContainer\">\r\n          <span\r\n            class=\"icon\"\r\n            on:click={() => jq(`#${filetag}FileContainer`).toggle()}>\r\n            <i class=\"fas fa-angle-right\" aria-hidden=\"true\" />\r\n          </span>\r\n          <span>{folderFile.parentFolder}</span>\r\n        </div>\r\n\r\n        <ul class=\"menu-list\" id=\"{filetag}FileContainer\">\r\n\r\n          {#if folderFile.files.length > 0}\r\n            <li>\r\n              <div class=\"pretty p-icon p-round p-pulse\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"{filetag}selectall\"\r\n                  on:click={selectAllToggle} />\r\n                <div class=\"state p-primary\">\r\n                  <i class=\"icon mdi mdi-check\" />\r\n                  <label>Select All</label>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          {:else}\r\n            <h1 class=\"subtitle\">No {filetag} files here</h1>\r\n          {/if}\r\n\r\n          {#each folderFile.files as filename}\r\n            <li class={filename} style=\"display:block;\">\r\n              <div class=\"pretty p-icon p-round p-smooth\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={filename}\r\n                  class=\"{filetag}-files\"\r\n                  on:click={getCheckedFiles} />\r\n                <div class=\"state p-success\">\r\n                  <i class=\"icon mdi mdi-check\" />\r\n                  <label for={filename}>{filename}</label>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          {/each}\r\n\r\n        </ul>\r\n      </aside>\r\n    </div>\r\n\r\n    {#each folderFile.folders as foldername}\r\n      <div class=\"panel-block\">\r\n        <aside class=\"menu\">\r\n          <div class=\"menu-label has-text-white\">\r\n            <span class=\"icon\">\r\n              <i class=\"fas fa-angle-right\" aria-hidden=\"true\" />\r\n            </span>\r\n            <span id={foldername} on:click={() => changeDir(foldername)}>\r\n              {foldername}\r\n            </span>\r\n          </div>\r\n        </aside>\r\n      </div>\r\n    {/each}\r\n  {:else}\r\n    <div class=\"panel-block\">\r\n      <h1 class=\"subtitle\">Browse to load files</h1>\r\n    </div>\r\n  {/if}\r\n</nav>\r\n"
  ],
  "names": [],
  "mappings": "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"
}