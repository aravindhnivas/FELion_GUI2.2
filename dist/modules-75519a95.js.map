{"version":3,"file":"modules-75519a95.js","sources":["../src/components/utils/js/modules.js"],"sourcesContent":["\r\n\r\n// Importing modules\r\n\r\nconst { spawn, exec } = require(\"child_process\");\r\nconst path = require('path');\r\nconst fs = require(\"fs\")\r\n\r\nconst find_process = require(\"find-process\")\r\n\r\nfunction killPort(port) {\r\n    return new Promise((resolve, reject)=>{\r\n\r\n        find_process(\"port\", port).then(result=>{\r\n\r\n            if (result.length > 0) {\r\n\r\n                let pid = result[0].pid\r\n                let platform = process.platform\r\n\r\n                if (platform === \"win32\") exec(`taskkill /F /PID ${pid}`)\r\n                else if (platform === \"darwin\") exec(`kill ${pid}`)\r\n                else if (platform === \"linux\") exec(`killall ${pid}`)\r\n                resolve(\"Process killed.\")\r\n            } else {reject(`No process found at port ${port}`)}\r\n\r\n        })\r\n    })\r\n}\r\n\r\nlet screenWidth = window.screen.width\r\nlet plot_height = screenWidth * .22\r\n\r\nfunction subplot(mainTitle, xtitle, ytitle, data, plotArea, x2, y2, data2) {\r\n\r\n    let dataLayout = {\r\n\r\n        title: mainTitle,\r\n\r\n        xaxis: {\r\n            domain: [0, 0.4],\r\n            title: xtitle\r\n        },\r\n\r\n        yaxis: {\r\n            title: ytitle\r\n        },\r\n\r\n        xaxis2: {\r\n            domain: [0.5, 1],\r\n            title: x2\r\n        },\r\n\r\n        yaxis2: {\r\n            anchor: \"x2\",\r\n            title: y2,\r\n            overlaying: 'y',\r\n        },\r\n\r\n        yaxis3: {\r\n\r\n            anchor: 'free',\r\n            overlaying: 'y',\r\n            side: 'right',\r\n\r\n            title: \"Measured (mJ)\",\r\n            position: 0.97\r\n        },\r\n\r\n        autosize: true,\r\n        height: plot_height,\r\n    }\r\n\r\n    let dataPlot1 = [];\r\n    for (let x in data) {\r\n        dataPlot1.push(data[x]);\r\n    }\r\n\r\n    let dataPlot2 = [];\r\n    for (let x in data2) {\r\n        dataPlot2.push(data2[x]);\r\n    }\r\n\r\n    Plotly.react(plotArea, dataPlot1.concat(dataPlot2), dataLayout, { editable: true })\r\n\r\n}\r\n\r\nfunction plot(mainTitle, xtitle, ytitle, data, plotArea, filetype = null) {\r\n\r\n    let dataLayout = {\r\n        title: mainTitle,\r\n        xaxis: {\r\n            title: xtitle\r\n        },\r\n        yaxis: {\r\n            title: ytitle\r\n        },\r\n\r\n        hovermode: 'closest',\r\n        autosize: true,\r\n        height: plot_height,\r\n\r\n    };\r\n\r\n    if (filetype == 'mass') { dataLayout.yaxis.type = \"log\" }\r\n    let dataPlot = [];\r\n    for (let x in data) { dataPlot.push(data[x]) }\r\n\r\n    try { Plotly.react(plotArea, dataPlot, dataLayout, { editable: true }) } catch (err) { console.log(err) }\r\n}\r\nclass program {\r\n\r\n    constructor(obj) {\r\n        this.obj = obj\r\n\r\n        console.log(\":: constructor -> this.obj\", this.obj);\r\n\r\n        console.log(`Received ${obj.filetype}files:`, obj.files);\r\n        this.filetype = obj.filetype\r\n        this.mainbtn = obj.mainbtn;\r\n        this.pyfile = obj.pyfile;\r\n        this.files = obj.files\r\n        this.args = obj.args\r\n    };\r\n\r\n    filecheck() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.files.length == 0) {\r\n                reject(\"No files selected\")\r\n            } else { resolve(`Filecheck completed: ${this.filetype} files`) }\r\n        })\r\n    }\r\n\r\n    run() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (this.filetype == \"general\") {\r\n                let shell_value = document.getElementById(this.obj.filetag + \"_shell\").checked\r\n\r\n                const py = spawn(\r\n                    localStorage[\"pythonpath\"],\r\n                    [\"-i\", path.join(localStorage[\"pythonscript\"], this.pyfile), this.files.concat(this.args)],\r\n                    {\r\n                        detached: true,\r\n                        stdio: 'ignore',\r\n                        shell: shell_value\r\n                    }\r\n                );\r\n\r\n                py.unref()\r\n\r\n                resolve(\"Done\");\r\n\r\n            }\r\n            else {\r\n\r\n                let py;\r\n                try {\r\n                    fs.readFileSync(`${localStorage[\"pythonpath\"]}.exe`)\r\n                    py = spawn(\r\n                        localStorage[\"pythonpath\"],\r\n                        [path.join(localStorage[\"pythonscript\"], this.pyfile), this.files.concat(this.args)]\r\n                    );\r\n                } catch (err) { reject(`Check python location (Settings-->Configuration-->Pythonpath)\\n${err}`) }\r\n\r\n                py.stdout.on(\"data\", data => {\r\n\r\n                    let dataFromPython;\r\n                    dataFromPython = data.toString(\"utf8\");\r\n\r\n                    if (!this.obj.checking) {\r\n                        console.log(\"Running python code\")\r\n                        dataFromPython = JSON.parse(dataFromPython);\r\n                        console.log(\"After JSON parse :\", dataFromPython);\r\n                    } else { console.log(\"Before JSON parse :\" + dataFromPython) }\r\n\r\n                    try {\r\n\r\n                        if (this.filetype == \"mass\") {\r\n                            plot(\"Mass spectrum\", \"Mass [u]\", \"Counts\", dataFromPython, \"mplot\", \"mass\");\r\n\r\n                        } else if (this.filetype == \"scan\") {\r\n                            let filename = this.obj.plotArea.split(\"_t\")[0]\r\n                            plot(`Timescan Plot: ${filename}`, \"Time (in ms)\", \"Counts\", dataFromPython, this.obj.plotArea);\r\n                        } else if (this.filetype == \"felix\") {\r\n                            window.line = []\r\n                            window.index = []\r\n                            window.annotations = []\r\n                            let normMethod = this.obj.normethod;\r\n                            let delta = this.args[0];\r\n\r\n                            let felixdataToPlot;\r\n                            let avgdataToPlot;\r\n\r\n                            let signal_formula;\r\n                            let ylabel;\r\n\r\n                            if (normMethod === \"Log\") {\r\n\r\n                                avgdataToPlot = dataFromPython[\"average\"]\r\n\r\n                                signal_formula = \"Signal = -ln(C/B)/Power(in J)\"\r\n                                ylabel = \"Normalised Intensity per J\"\r\n\r\n                            } else if (normMethod == \"Relative\") {\r\n\r\n                                avgdataToPlot = dataFromPython[\"average_rel\"]\r\n\r\n                                signal_formula = \"Signal = (1-C/B)*100\"\r\n                                ylabel = \"Relative Depletion (%)\"\r\n\r\n                            } else if (normMethod == \"IntensityPerPhoton\") {\r\n\r\n                                avgdataToPlot = dataFromPython[\"average_per_photon\"]\r\n\r\n                                signal_formula = \"Signal = -ln(C/B)/#Photons\"\r\n                                ylabel = \"Normalised Intensity per photon\"\r\n                            }\r\n\r\n                            plot(\r\n                                \"Baseline Corrected\",\r\n                                \"Wavelength (cm-1)\",\r\n                                \"Counts\",\r\n                                dataFromPython[\"base\"],\r\n                                \"bplot\"\r\n                            );\r\n\r\n                            plot(\r\n                                `Normalised and Averaged Spectrum (delta=${delta})<br>${signal_formula}; {C=Measured Count, B=Baseline Count}`,\r\n                                \"Calibrated Wavelength (cm-1)\",\r\n                                ylabel,\r\n                                avgdataToPlot,\r\n                                \"avgplot\"\r\n                            );\r\n\r\n                            //Spectrum and Power Analyer\r\n                            subplot(\r\n                                \"Spectrum and Power Analyser\",\r\n                                \"Wavelength set (cm-1)\",\r\n                                \"SA (cm-1)\",\r\n                                dataFromPython[\"SA\"],\r\n                                \"saPlot\",\r\n                                \"Wavelength (cm-1)\",\r\n                                `Total Power (mJ)`,\r\n                                dataFromPython[\"pow\"]\r\n                            );\r\n\r\n                            let avgplot = document.getElementById(\"avgplot\")\r\n                            avgplot.on(\"plotly_selected\", (data) => {\r\n                                if (!data) console.log(\"No data available to fit\")\r\n                                else {\r\n                                    console.log(data)\r\n\r\n                                    let { range } = data\r\n                                    let filename = data.points[0].data.name.split(\".\")[0]\r\n                                    window.index = range.x\r\n                                    window.filename = filename\r\n\r\n                                    console.log(`Selected file: ${window.filename}`)\r\n                                    console.log(`Index selected: ${window.index}`)\r\n                                    document.getElementById(\"fitFiles\").value = filename\r\n                                    document.getElementById(\"expfitFiles\").value = filename\r\n\r\n                                }\r\n                            })\r\n                        }\r\n                        else if (this.filetype == \"theory\") {\r\n\r\n                            let normethod = this.args[0];\r\n                            let ylabel;\r\n                            if (normethod === \"Log\") { ylabel = \"Normalised Intensity per J\" }\r\n                            else if (normethod === \"Relative\") { ylabel = \"Relative Depletion (%)\" }\r\n                            else { ylabel = \"Normalised Intensity per Photon\" }\r\n\r\n                            let theoryData = [];\r\n                            for (let x in dataFromPython[\"line_simulation\"]) { theoryData.push(dataFromPython[\"line_simulation\"][x]) }\r\n\r\n                            plot(\r\n                                \"Experimental vs Theory\",\r\n                                \"Calibrated Wavelength (cm-1)\",\r\n                                ylabel, [dataFromPython[\"averaged\"], ...theoryData],\r\n                                \"exp-theory-plot\"\r\n                            );\r\n                        }\r\n                        else if (this.filetype == \"thz\") {\r\n\r\n\r\n                            let delta_thz = this.args\r\n\r\n                            plot(`THz Scan`, \"Frequency (GHz)\", \"Depletion (%)\", dataFromPython, \"thzplot_Container\");\r\n\r\n                            let lines = [];\r\n\r\n                            for (let x in dataFromPython[\"shapes\"]) { lines.push(dataFromPython[\"shapes\"][x]) }\r\n                            let layout_update = {\r\n                                shapes: lines\r\n                            }\r\n                            Plotly.relayout(\"thzplot_Container\", layout_update)\r\n                        }\r\n                        else if (this.filetype == \"depletion\") { console.log('Graph plotted') }\r\n                        else if (this.filetype == \"norm_tkplot\") { console.log('Graph plotted') }\r\n                        else if (this.filetype == \"exp_fit\") {\r\n\r\n                            // window.index = []\r\n\r\n                            Plotly.addTraces(\"avgplot\", dataFromPython[\"fit\"])\r\n\r\n                            window.line = [...window.line, ...dataFromPython[\"line\"]]\r\n                            Plotly.relayout(\"avgplot\", { shapes: window.line })\r\n\r\n                            window.annotations = [...window.annotations, dataFromPython[\"annotations\"]]\r\n                            Plotly.relayout(\"avgplot\", { annotations: window.annotations })\r\n\r\n                        } else if (this.filetype == \"expfit_all\") {\r\n                            Plotly.relayout(\"avgplot\", { annotations: [] })\r\n                            Plotly.relayout(\"avgplot\", { annotations: dataFromPython[2][\"annotations\"] })\r\n                            window.annotations = dataFromPython[2][\"annotations\"]\r\n\r\n                            if (dataFromPython[3] != undefined) {\r\n                                let fit = dataFromPython[3]\r\n                                fit.forEach(data => {\r\n                                    Plotly.addTraces(\"avgplot\", data[\"fit\"])\r\n                                    window.line = [...window.line, ...data[\"line\"]]\r\n                                    Plotly.relayout(\"avgplot\", { shapes: window.line })\r\n\r\n                                })\r\n                            }\r\n                        } else if (this.filetype == \"find_peaks\") {\r\n                            Plotly.relayout(\"mplot\", { yaxis: { title: \"Counts\", type: \"\" } })\r\n                            Plotly.relayout(\"mplot\", { annotations: [] })\r\n                            Plotly.relayout(\"mplot\", { annotations: dataFromPython[\"annotations\"] })\r\n                            Plotly.relayout(\"mplot\", { yaxis: { title: \"Counts\", type: \"log\" } })\r\n                        }\r\n\r\n                        console.log(\"Graph Plotted\");\r\n\r\n                    } catch (err) {\r\n                        console.error(\"Error Occured in javascript code: \" + err);\r\n                    }\r\n\r\n                });\r\n\r\n                let error_occured_py = false;\r\n                let error_result;\r\n\r\n                py.stderr.on(\"data\", data => {\r\n\r\n                    error_result = data\r\n                    error_occured_py = true;\r\n                    // console.error(`Error from python: ${data}`);\r\n                });\r\n\r\n                py.on(\"close\", () => {\r\n                    console.log(\"Returned to javascript\");\r\n\r\n                    if (!error_occured_py) {\r\n                        resolve(`Plotted for ${this.filetype} file`)\r\n\r\n                    } else {\r\n                        reject(`Error Occured from python \\n${error_result}\\n`)\r\n                    }\r\n\r\n                });\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport { program, killPort }"],"names":[],"mappings":"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"}